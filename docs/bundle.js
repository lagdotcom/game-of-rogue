(()=>{var t={5426:(t,e,i)=>{"use strict";i.d(e,{Z:()=>v});var r=i(7537),n=i.n(r),s=i(3645),o=i.n(s),a=i(1667),h=i.n(a),c=new URL(i(4528),i.b),u=new URL(i(5002),i.b),l=new URL(i(4299),i.b),d=new URL(i(2721),i.b),f=o()(n()),p=h()(c),m=h()(u),g=h()(l),y=h()(d);f.push([t.id,"@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 100;\r\n    src: url("+p+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 300;\r\n    src: url("+m+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 400;\r\n    src: url("+g+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 500;\r\n    src: url("+y+") format('truetype');\r\n}\r\n\r\nhtml,\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: normal;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n\r\ncanvas {\r\n    font-weight: 300;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAA+D;AACnE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAgE;AACpE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAkE;AACtE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAiE;AACrE;;AAEA;;IAEI,UAAU;IACV,SAAS;IACT,mBAAmB;IACnB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,qCAAqC;AACzC",sourcesContent:["@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 100;\r\n    src: url('./robotomono/RobotoMono-Thin.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 300;\r\n    src: url('./robotomono/RobotoMono-Light.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 400;\r\n    src: url('./robotomono/RobotoMono-Regular.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 500;\r\n    src: url('./robotomono/RobotoMono-Medium.ttf') format('truetype');\r\n}\r\n\r\nhtml,\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: normal;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n\r\ncanvas {\r\n    font-weight: 300;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n"],sourceRoot:""}]);const v=f},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",r=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),r&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),r&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,r,n,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),i&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=i):u[2]=i),n&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=n):u[4]="".concat(n)),e.push(u))}},e}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(n," */"),o=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([s]).join("\n")}return[e].join("\n")}},4319:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d+++++++d\r\ndE.....Ed\r\ndddd.dddd\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\nd##+++##d"},8158:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d#####d\r\n#.....+\r\n#.d###d\r\n#.#    \r\n#.#    \r\n#.#    \r\nd+d    "},1083:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d#####+#####d\r\n#...........#\r\n#...........#\r\n#..#.....#..#\r\n+...........+\r\n#..#.....#..#\r\n+...........+\r\n#..#.....#..#\r\n#...........#\r\n#...........#\r\nd#####+#####d"},5490:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="ddddd\r\nd$$$d\r\nd#+#d\r\ndEEEd\r\nd.E.d\r\ndd+dd"},5705:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="ddddd\r\n#...#\r\n+...+\r\n#...#\r\n+...+\r\n#...#\r\nddddd"},8141:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d+d\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\nd+d"},4109:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d###########\r\n#..........+\r\n#.d########d\r\n#.#.E......d\r\n#.#........d\r\n#.#........d\r\n#.#......E.d\r\n#.+........d\r\n#.#........d\r\n#.#.....dddd\r\n#.#.....+..d\r\n#.#..E..d$$d\r\n#+dddddddddd"},7871:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d###d\r\n#.$.#\r\n#.E.#\r\n#...#\r\n#...#\r\n#...#\r\n#...#\r\nd#+#d"},496:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d####d####d\r\n+.........+\r\nd###d.d###d\r\n    #.#    \r\n    #.#    \r\n    #.#    \r\n    d+d    "},267:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d#+#d\r\n#...#\r\n+.d.+\r\n#...#\r\nd#+#d"},9809:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});const r="d###+###d\r\n#.......#\r\n#.......#\r\n#.......#\r\n+.......+\r\n#.......#\r\n#.......#\r\n#.......#\r\nd###+###d"},6377:(t,e,i)=>{var r=i(4832),n=i(8652),s=i(801),o=i(2030),a=i(3618),h=i(9049),c=i(1971);c.alea=r,c.xor128=n,c.xorwow=s,c.xorshift7=o,c.xor4096=a,c.tychei=h,t.exports=c},4832:function(t,e,i){var r;!function(t,n,s){function o(t){var e,i=this,r=(e=4022871197,function(t){t=String(t);for(var i=0;i<t.length;i++){var r=.02519603282416938*(e+=t.charCodeAt(i));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});i.next=function(){var t=2091639*i.s0+2.3283064365386963e-10*i.c;return i.s0=i.s1,i.s1=i.s2,i.s2=t-(i.c=0|t)},i.c=1,i.s0=r(" "),i.s1=r(" "),i.s2=r(" "),i.s0-=r(t),i.s0<0&&(i.s0+=1),i.s1-=r(t),i.s1<0&&(i.s1+=1),i.s2-=r(t),i.s2<0&&(i.s2+=1),r=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var i=new o(t),r=e&&e.state,n=i.next;return n.int32=function(){return 4294967296*i.next()|0},n.double=function(){return n()+11102230246251565e-32*(2097152*n()|0)},n.quick=n,r&&("object"==typeof r&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.alea=h}(0,t=i.nmd(t),i.amdD)},9049:function(t,e,i){var r;!function(t,n,s){function o(t){var e=this,i="";e.next=function(){var t=e.b,i=e.c,r=e.d,n=e.a;return t=t<<25^t>>>7^i,i=i-r|0,r=r<<24^r>>>8^n,n=n-t|0,e.b=t=t<<20^t>>>12^i,e.c=i=i-r|0,e.d=r<<16^i>>>16^n,e.a=n-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):i+=t;for(var r=0;r<i.length+20;r++)e.b^=0|i.charCodeAt(r),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var i=new o(t),r=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,r&&("object"==typeof r&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.tychei=h}(0,t=i.nmd(t),i.amdD)},8652:function(t,e,i){var r;!function(t,n,s){function o(t){var e=this,i="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:i+=t;for(var r=0;r<i.length+64;r++)e.x^=0|i.charCodeAt(r),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var i=new o(t),r=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,r&&("object"==typeof r&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.xor128=h}(0,t=i.nmd(t),i.amdD)},3618:function(t,e,i){var r;!function(t,n,s){function o(t){var e=this;e.next=function(){var t,i,r=e.w,n=e.X,s=e.i;return e.w=r=r+1640531527|0,i=n[s+34&127],t=n[s=s+1&127],i^=i<<13,t^=t<<17,i^=i>>>15,t^=t>>>12,i=n[s]=i^t,e.i=s,i+(r^r>>>16)|0},function(t,e){var i,r,n,s,o,a=[],h=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,h=Math.max(h,e.length)),n=0,s=-32;s<h;++s)e&&(r^=e.charCodeAt((s+32)%e.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,n=0==(i=a[127&s]^=r+o)?n+1:0);for(n>=128&&(a[127&(e&&e.length||0)]=-1),n=127,s=512;s>0;--s)r=a[n+34&127],i=a[n=n+1&127],r^=r<<13,i^=i<<17,r^=r>>>15,i^=i>>>12,a[n]=r^i;t.w=o,t.X=a,t.i=n}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),r=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,r&&(r.X&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.xor4096=h}(0,t=i.nmd(t),i.amdD)},2030:function(t,e,i){var r;!function(t,n,s){function o(t){var e=this;e.next=function(){var t,i,r=e.x,n=e.i;return t=r[n],i=(t^=t>>>7)^t<<24,i^=(t=r[n+1&7])^t>>>10,i^=(t=r[n+3&7])^t>>>3,i^=(t=r[n+4&7])^t<<7,t=r[n+7&7],i^=(t^=t<<13)^t<<9,r[n]=i,e.i=n+1&7,i},function(t,e){var i,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,i=0;i<e.length;++i)r[7&i]=r[7&i]<<15^e.charCodeAt(i)+r[i+1&7]<<13;for(;r.length<8;)r.push(0);for(i=0;i<8&&0===r[i];++i);for(8==i?r[7]=-1:r[i],t.x=r,t.i=0,i=256;i>0;--i)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),r=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,r&&(r.x&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.xorshift7=h}(0,t=i.nmd(t),i.amdD)},801:function(t,e,i){var r;!function(t,n,s){function o(t){var e=this,i="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:i+=t;for(var r=0;r<i.length+64;r++)e.x^=0|i.charCodeAt(r),r==i.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var i=new o(t),r=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,r&&("object"==typeof r&&a(r,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(r=function(){return h}.call(e,i,e,n))||(n.exports=r):this.xorwow=h}(0,t=i.nmd(t),i.amdD)},1971:function(t,e,i){var r;!function(n,s,o){var a,h=256,c=o.pow(h,6),u=o.pow(2,52),l=2*u,d=255;function f(t,e,i){var r=[],d=y(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,v(s)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(h):(t=new Uint8Array(h),(n.crypto||n.msCrypto).getRandomValues(t)),v(t)}catch(t){var e=n.navigator,i=e&&e.plugins;return[+new Date,n,i,n.screen,v(s)]}}():t,3),r),f=new p(r),b=function(){for(var t=f.g(6),e=c,i=0;t<u;)t=(t+i)*h,e*=h,i=f.g(1);for(;t>=l;)t/=2,e/=2,i>>>=1;return(t+i)/e};return b.int32=function(){return 0|f.g(4)},b.quick=function(){return f.g(4)/4294967296},b.double=b,y(v(f.S),s),(e.pass||i||function(t,e,i,r){return r&&(r.S&&m(r,f),t.state=function(){return m(f,{})}),i?(o.random=t,e):t})(b,d,"global"in e?e.global:this==o,e.state)}function p(t){var e,i=t.length,r=this,n=0,s=r.i=r.j=0,o=r.S=[];for(i||(t=[i++]);n<h;)o[n]=n++;for(n=0;n<h;n++)o[n]=o[s=d&s+t[n%i]+(e=o[n])],o[s]=e;(r.g=function(t){for(var e,i=0,n=r.i,s=r.j,o=r.S;t--;)e=o[n=d&n+1],i=i*h+o[d&(o[n]=o[s=d&s+e])+(o[s]=e)];return r.i=n,r.j=s,i})(h)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var i,r=[],n=typeof t;if(e&&"object"==n)for(i in t)try{r.push(g(t[i],e-1))}catch(t){}return r.length?r:"string"==n?t:t+"\0"}function y(t,e){for(var i,r=t+"",n=0;n<r.length;)e[d&n]=d&(i^=19*e[d&n])+r.charCodeAt(n++);return v(e)}function v(t){return String.fromCharCode.apply(0,t)}if(y(o.random(),s),t.exports){t.exports=f;try{a=i(5042)}catch(t){}}else void 0===(r=function(){return f}.call(e,i,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},7654:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>y});var r=i(3379),n=i.n(r),s=i(7795),o=i.n(s),a=i(569),h=i.n(a),c=i(3565),u=i.n(c),l=i(9216),d=i.n(l),f=i(4589),p=i.n(f),m=i(5426),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=h().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),n()(m.Z,g);const y=m.Z&&m.Z.locals?m.Z.locals:void 0},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,r=0;r<e.length;r++)if(e[r].identifier===t){i=r;break}return i}function r(t,r){for(var s={},o=[],a=0;a<t.length;a++){var h=t[a],c=r.base?h[0]+r.base:h[0],u=s[c]||0,l="".concat(c," ").concat(u);s[c]=u+1;var d=i(l),f={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=n(f,r);r.byIndex=a,e.splice(a,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function n(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,n){var s=r(t=t||[],n=n||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=i(s[o]);e[a].references--}for(var h=r(t,n),c=0;c<s.length;c++){var u=i(s[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=h}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var r=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var r="";i.supports&&(r+="@supports (".concat(i.supports,") {")),i.media&&(r+="@media ".concat(i.media," {"));var n=void 0!==i.layer;n&&(r+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),r+=i.css,n&&(r+="}"),i.media&&(r+="}"),i.supports&&(r+="}");var s=i.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},2203:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.aiAngry=e.aiInvestigating=e.aiPassive=e.normalAI=void 0;const r=i(9028),n=i(9607),s=i(4945),o=i(7594),a=i(9699);function h(t){return!!p(t)||!!m(t)||!!function(t){if(!t.aiTraits.investigatesNoises)return!1;const e=t.g.noise.closest(t);return!!e&&d(t,e.pos)}(t)}function c(t){return!!p(t)||!!m(t)||!!function(t){const e=t.targetPos;return e?0===(0,o.distance)(t.pos,e)&&f(t):f(t)}(t)||!!g(t,t.targetPos)||f(t)}function u(t){var e;return!!function(t){const e=t.target;return e?(e.dead||e.side===t.side)&&f(t):f(t)}(t)||!!function(t){const e=t.target;return e?!(0,n.canSee)(t,e.pos)&&d(t,e.pos):f(t)}(t)||!!function(t){const e=t.target;if(!e)return f(t);const i=Math.abs(t.pos.x-e.pos.x),n=Math.abs(t.pos.y-e.pos.y);if(i>1||n>1)return!1;const s=(0,o.getDirectionBetween)(t.pos,e.pos);return s!==t.facing?t.turn(s,!0):(0,r.attack)(t,e)}(t)||g(t,null===(e=t.target)||void 0===e?void 0:e.pos)}function l(t,e){const i=t.g;return t.aiTraits.yellsOnSight&&t.target!==e&&((0,n.canSee)(i.player,t.pos)?i.log.info("%an yells a challenge at %bn!",t,e):(0,o.distance)(i.player.pos,t.pos)<i.player.hearingRange&&i.log.info("You hear someone shout a challenge!"),i.noise.add(t.pos,t.aiTraits.yellsOnSight,t,2)),t.target=e,t.aiState=a.AIState.Angry,u(t)}function d(t,e){return t.targetPos=e,t.aiState=a.AIState.Investigating,c(t)}function f(t){return t.target=void 0,t.targetPos=void 0,t.aiState=a.AIState.Passive,!0}function p(t){if(t.aiHurtBy){const e=t.aiHurtBy;if(t.aiHurtBy=void 0,(0,n.canSee)(t,e.pos))return l(t,e);const i=(0,o.getDirectionBetween)(t.pos,e.pos);if(i!==t.facing)return t.turn(i,!0)}return!1}function m(t){const e=(0,n.getVisibleEnemies)(t);return!!e.length&&l(t,(0,o.oneOf)(t.g.rng,e))}function g(t,e){if(!e)return!1;const i=(0,s.makePath)(t.g.f,t.pos,e);if(!i)return!1;const r=i[1],n=(0,o.getDirectionBetween)(t.pos,r);return n!==t.facing?t.turn(n,!0):t.move(r,!0)}e.normalAI=function(){switch(this.aiState){case a.AIState.Passive:return h(this);case a.AIState.Investigating:return c(this);case a.AIState.Angry:return u(this);default:return!1}},e.aiPassive=h,e.aiInvestigating=c,e.aiAngry=u},6272:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Actor=void 0;const r=i(9349),n=i(7594),s=i(9699);e.Actor=class{constructor(t,e,i){this.g=t,this.name=e,this.side=i,this.g=t,this.aiState=s.AIState.Passive,this.aiTraits={},this.base={armour:0,balanceMax:100,balanceRegen:1,hearingRange:10,hpRegen:.01,hpMax:0,kiRegen:.1,kiMax:0,moveCost:1,moveTimer:0,power:0,sightFov:160,sightRange:5,strength:0,weight:0},this.bg="red",this.balance=this.base.balanceMax,this.char="?",this.dead=!1,this.equipment={},this.facing=s.Dir.N,this.fg="yellow",this.hp=1,this.inventory=[],this.isActor=!0,this.ki=0,this.lifetime=1/0,this.name=e,this.nextMove=0,this.pos={x:-1,y:-1},this.skills=[],this.skillsMastered=[],this.substituteActive=!1,this.substituteTimer=0,this.turnCost=.5}get alive(){return!this.dead}get armour(){return this.stat("armour")}get balanceMax(){return this.stat("balanceMax")}get balanceRegen(){return this.stat("balanceRegen")}get hearingRange(){return this.stat("hearingRange")}get hpMax(){return this.stat("hpMax")}get hpRegen(){return this.stat("hpRegen")}get kiMax(){return this.stat("kiMax")}get kiRegen(){return this.stat("kiRegen")}get moveCost(){return this.stat("moveCost")}get sightFov(){return this.stat("sightFov")}get sightRange(){return this.stat("sightRange")}get strength(){return this.stat("strength")}get maxCarriedWeight(){return 3*this.strength}get equippedItems(){return Object.values(this.equipment).filter(n.isDefined)}get carriedWeight(){return this.inventory.concat(this.equippedItems).reduce(((t,e)=>t+e.totalWeight),0)}stat(t){let e=this.base[t];return this.equippedItems.forEach((i=>e+=i.stat(t))),e}apply(t){this.hp=this.base.hpMax=t.hp,this.ki=this.base.kiMax=t.ki,this.base.strength=t.str}move(t,e){if(this.g.f.map.get(t.x,t.y)===s.Tile.Wall)return!1;if(this.g.actors.filter((e=>e.pos===t)).length)return!1;const i=this.pos;return this.pos=t,this.isPlayer&&(this.g.redraw(),this.g.hooks.fire("player.move",{actor:this,from:i})),e&&this.spend(this.moveCost),!0}turn(t,e){if(this.facing===t)return!1;const i=this.facing;return this.facing=t,this.isPlayer&&(this.g.redraw(),this.g.hooks.fire("player.turn",{actor:this,from:i})),e&&this.spend(this.turnCost),!0}spend(t){this.nextMove+=t,this.isPlayer&&this.g.advance(t)}regen(t){this.dead||(this.balance=Math.min(this.balanceMax,this.balance+this.balanceRegen*t),this.ki=Math.min(this.kiMax,this.ki+this.kiRegen*t),this.hp=Math.min(this.hpMax,this.hp+this.hpRegen*t))}get(t){this.g.t.todo("Actor.get",this.name,t.template.name),this.inventory.push(t)}equip(t){if(this.g.t.enter("Actor.equip",this.name,t.template.name),(0,r.isWeapon)(t)){if(0===t.template.hands&&t.template.ammo){let e;if(this.equipment.both)e=this.equipment.both;else{if(!this.equipment.primary)return this.isPlayer&&this.g.log.info("Equip the weapon first."),this.g.t.message("cannot equip ammo; no weapon equipped"),this.g.t.leave("Actor.equip"),!1;e=this.equipment.primary}if(t.template.firedBy&&!e.matches(t.template.firedBy))return this.isPlayer&&this.g.log.info(`${e.name()} can't fire ${t.name()}`),this.g.t.message("cannot equip ammo; wrong weapon equipped"),this.g.t.leave("Actor.equip"),!1;const i=this.equipApply(t,s.ItemSlot.Secondary);return this.g.t.leave("Actor.equip"),i}if(2===t.template.hands){if(this.equipment.both&&!this.unEquip(s.ItemSlot.BothHands))return this.g.t.message("cannot remove BothHand"),this.g.t.leave("Actor.equip"),!1;if(this.equipment.secondary&&!this.unEquip(s.ItemSlot.Secondary))return this.g.t.message("cannot remove Secondary"),this.g.t.leave("Actor.equip"),!1;if(this.equipment.primary&&!this.unEquip(s.ItemSlot.Primary))return this.g.t.message("cannot remove Primary"),this.g.t.leave("Actor.equip"),!1;const e=this.equipApply(t,s.ItemSlot.BothHands);return this.g.t.leave("Actor.equip"),e}if(this.equipment.both&&!this.unEquip(s.ItemSlot.BothHands))return this.g.t.message("cannot remove BothHands"),this.g.t.leave("Actor.equip"),!1;if(t.template.offhand&&this.equipment.primary){if(this.equipment.secondary&&!this.unEquip(s.ItemSlot.Secondary))return this.g.t.message("cannot remove Secondary"),this.g.t.leave("Actor.equip"),!1;const e=this.equipApply(t,s.ItemSlot.Secondary);return this.g.t.leave("Actor.equip"),e}if(!this.unEquip(s.ItemSlot.Primary))return this.g.t.message("cannot remove Primary"),this.g.t.leave("Actor.equip"),!1;const e=this.equipApply(t,s.ItemSlot.Primary);return this.g.t.leave("Actor.equip"),e}if((0,r.isArmour)(t)){if(!this.unEquip(t.template.slot))return this.g.t.message("cannot remove",t.template.slot),this.g.t.leave("Actor.equip"),!1;const e=this.equipApply(t,t.template.slot);return this.g.t.leave("Actor.equip"),e}return!1}equipApply(t,e){return this.equipment[e]=t,this.inventory=this.inventory.filter((e=>e!==t)),!0}unEquip(t){return!this.equipment[t]||(this.g.t.message("Actor.unEquip",this.name,t),this.unEquipApply(t))}unEquipApply(t){const e=this.equipment[t];return e&&(this.inventory.push(e),delete this.equipment[t]),!0}ai(){return!1}getPrimaryWeapon(){const t=this.equipment.both;if(t)return t;return this.equipment.primary||this.natural}getSecondaryWeapon(){return this.equipment.secondary||this.natural2}}},1207:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.describeTile=e.randomEnemy=void 0;const r=i(5601),n=i(6724),s=i(8925),o=i(142),a=i(9349),h=i(6248),c=i(7594),u=i(9699),l=Object.values(r.dirOffsets);e.default=class{constructor(t){this.g=t}generate(t,e,i,n,s=!1){s||(this.g.t.enter("Architect.generate",e,i,n,this.g.rng.getSeed()),this.g.hooks.fire("architect.begin",{}));const a=new o.Floor(`Floor${t}`,t,e,i),h=this.randomRoom(),u=(0,c.int)((e-h.width)/2),l=(0,c.int)((i-h.height)/2);this.g.t.message(`pasted ${h.name} @${u},${l}`),a.map.paste(u,l,h," ");let d=0,f=1;const p=new Set;for(;f<n;){const t=this.randomRoom(),e=this.pickPastePoint(a.map,t,"#","d");if(e&&this.fits(a.map,t,e)&&!p.has(e))this.g.t.message(`pasted ${t.name} @${e.x},${e.y}`),a.map.paste(e.x,e.y,t," "),f++,p.add(e);else if(d++,d>r.ARCHITECT_ATTEMPTS){this.g.t.message("exceeded attempts threshold");break}}return f<r.ARCHITECT_MIN_ROOMS?(this.g.t.message("didn't generate enough rooms, retrying"),this.generate(t,e,i,n,!0)):(this.cleanup(a.map),this.addEnemies(a),this.addTreasure(a),this.placePlayer(a),this.g.hooks.fire("architect.end",{floor:a}),this.g.t.leave("Architect.generate"),a)}randomRoom(){return(0,c.oneOf)(this.g.rng,h.rooms).rotate((0,c.rnd)(this.g.rng,4))}pickPastePoint(t,e,...i){if(!t.find(...i).length)return;const r=(0,c.oneOf)(this.g.rng,t.find(...i));return{x:(0,c.rnd)(this.g.rng,2)?r.x:r.x-e.width+1,y:(0,c.rnd)(this.g.rng,2)?r.y:r.y-e.height+1}}fits(t,e,i){if(i.x<0)return!1;if(i.y<0)return!1;if(i.x+e.width>=t.width)return!1;if(i.y+e.height>=t.height)return!1;let r=!1;for(let n=i.x;n<i.x+e.width;n++)for(let s=i.y;s<i.y+e.height;s++){const o=t.get(n,s),a=e.get(n-i.x,s-i.y);if(a!==u.Tile.Empty&&o!==u.Tile.Empty){if(o!==u.Tile.Wall&&o!==u.Tile.NotDoor&&o!==u.Tile.Empty&&o!==a)return!1;if(o===u.Tile.NotDoor&&a===u.Tile.Door)return!1;o!==u.Tile.Wall&&o!==u.Tile.Door||a!==u.Tile.Door||(r=!0)}}return r}cleanup(t){this.g.t.enter("Architect.cleanup");let e=!0;for(;e;){e=!1;for(let i=0;i<t.height;i++)for(let r=0;r<t.width;r++){const n=t.get(r,i);if(n===u.Tile.NotDoor){t.set(r,i,u.Tile.Wall);continue}if(n!==u.Tile.Door)continue;const s=t.get(r,i-1),o=t.get(r-1,i),a=t.get(r+1,i),h=t.get(r,i+1);if(0===r||r===t.width-1||0===i||i===t.height-1){this.g.t.message("border door",r,i),e=!0,t.set(r,i,u.Tile.Wall);continue}if(o===u.Tile.Space&&a===u.Tile.Wall){this.g.t.message("carve right",r,i),e=!0,t.set(r+1,i,u.Tile.Space);continue}if(a===u.Tile.Space&&o===u.Tile.Wall){this.g.t.message("carve left",r,i),e=!0,t.set(r-1,i,u.Tile.Space);continue}if(s===u.Tile.Space&&h===u.Tile.Wall){this.g.t.message("carve down",r,i),e=!0,t.set(r,i+1,u.Tile.Space);continue}if(h===u.Tile.Space&&s===u.Tile.Wall){this.g.t.message("carve up",r,i),e=!0,t.set(r,i-1,u.Tile.Space);continue}if(o===u.Tile.Wall&&a!==u.Tile.Wall||a===u.Tile.Wall&&o!==u.Tile.Wall||s===u.Tile.Wall&&h!==u.Tile.Wall||h===u.Tile.Wall&&s!==u.Tile.Wall){e=!0,t.set(r,i,u.Tile.Space);continue}let c=0;o===u.Tile.Space&&c++,a===u.Tile.Space&&c++,s===u.Tile.Space&&c++,h===u.Tile.Space&&c++,c>2?(this.g.t.message("too many spaces",r,i),e=!0,t.set(r,i,u.Tile.Space)):o===u.Tile.Space&&a===u.Tile.Door||a===u.Tile.Space&&o===u.Tile.Door||s===u.Tile.Space&&h===u.Tile.Door||h===u.Tile.Space&&s===u.Tile.Door?(this.g.t.message("too many doors",r,i),e=!0,t.set(r,i,u.Tile.Space)):(o===u.Tile.Empty&&a===u.Tile.Space||a===u.Tile.Empty&&o===u.Tile.Space||s===u.Tile.Empty&&h===u.Tile.Space||h===u.Tile.Empty&&s===u.Tile.Space)&&(this.g.t.message("door to nowhere",r,i),e=!0,t.set(r,i,u.Tile.Wall))}}t.find(u.Tile.Space,u.Tile.Door).forEach((e=>{(0,c.any)(l,(i=>t.get(e.x+i.x,e.y+i.y)===u.Tile.Empty))&&(this.g.t.message("leak plugged",t.get(e.x,e.y),e),t.set(e.x,e.y,u.Tile.Wall))})),this.g.t.leave("Architect.cleanup")}addEnemies(t){for(this.g.t.enter("Architect.addEnemies"),t.map.find(u.Tile.Enemy).forEach((e=>{const i=f(this.g);t.map.set(e.x,e.y,u.Tile.Space),i.pos=e,t.enemies.push(i)}));t.enemies.length<r.ARCHITECT_MIN_ENEMIES;){const e=f(this.g),i=(0,c.oneOf)(this.g.rng,t.map.find(u.Tile.Space));t.enemyAt(i)||(e.pos=i,t.enemies.push(e))}this.g.t.leave("Architect.addEnemies")}addTreasure(t){this.g.t.enter("Architect.addTreasure"),t.map.find(u.Tile.Treasure).forEach((e=>{const i=(0,a.randomItem)(this.g);t.map.set(e.x,e.y,u.Tile.Space),i.pos=e,t.items.push(i)})),this.g.t.leave("Architect.addTreasure")}placePlayer(t){for(this.g.t.enter("Architect.placePlayer");;){const e=(0,c.oneOf)(this.g.rng,t.map.find(u.Tile.Space));if(!t.enemyAt(e)&&!t.itemAt(e)){t.player=e;break}}this.g.t.leave("Architect.placePlayer")}};const d=[n.EnemyNinja,s.EnemySamurai];function f(t){const e=(0,c.oneOf)(t.rng,d);t.t.enter("randomEnemy",e.name);const i=new e(t);return t.t.leave("randomEnemy"),i}e.randomEnemy=f,e.describeTile=function(t){switch(t){case u.Tile.NotDoor:case u.Tile.Wall:return"a wall";case u.Tile.Empty:case u.Tile.Space:return"an empty space";case u.Tile.Door:return"a door";case u.Tile.Enemy:return"an enemy";case u.Tile.Treasure:return"a piece of treasure";case u.Tile.Player:return"a challenger";default:return"dunno"}}},2061:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Display=e.DisplayCell=void 0;const r=i(7594),n=i(9699);class s{constructor(t,e,i,r,n){this.parent=t,this.x=e,this.y=i,this.w=r,this.h=n,this.fg("white"),this.bg("black"),this.text(" "),this.border("transparent"),this.dirty=!1,this.mx=e+r/2,this.my=i+n/2,this.ex=e+r-1,this.ey=i+n-1}set(t,e){this.fg(t.fg),this.bg(t.bg),this.text(t.char),this.border("transparent"),(0,r.isDefined)(e)?this.face(e):this.unFace()}fg(t){return void 0!==t&&this.f!==t&&(this.dirty=!0,this.f=t),this.f}bg(t){return void 0!==t&&this.b!==t&&(this.dirty=!0,this.b=t),this.b}border(t){return void 0!==t&&this.bo!==t&&(this.dirty=!0,this.bo=t),this.bo}face(t){return void 0!==t&&this.fa!==t&&(this.dirty=!0,this.fa=t),this.fa}unFace(){this.fa&&(this.dirty=!0,this.fa=void 0)}text(t){return void 0!==t&&(this.dirty=!0,this.value=t),this.value}draw(t){this.dirty&&(this.dirty=!1,t.fillStyle=this.b,t.fillRect(this.x,this.y,this.w,this.h),t.strokeStyle=this.f,t.strokeText(this.value,this.mx,this.my+1),"transparent"!==this.bo&&(t.strokeStyle=this.bo,t.strokeRect(this.x,this.y,this.w,this.h)),(0,r.isDefined)(this.fa)&&this.drawDir(t,this.fa))}drawDir(t,e){switch(t.strokeStyle="white",t.beginPath(),e){case n.Dir.N:t.moveTo(this.x,this.y),t.lineTo(this.ex,this.y);break;case n.Dir.NE:t.moveTo(this.mx,this.y),t.lineTo(this.ex,this.y),t.lineTo(this.ex,this.my);break;case n.Dir.E:t.moveTo(this.ex,this.y),t.lineTo(this.ex,this.ey);break;case n.Dir.SE:t.moveTo(this.ex,this.my),t.lineTo(this.ex,this.ey),t.lineTo(this.mx,this.ey);break;case n.Dir.S:t.moveTo(this.ex,this.ey),t.lineTo(this.x,this.ey);break;case n.Dir.SW:t.moveTo(this.mx,this.ey),t.lineTo(this.x,this.ey),t.lineTo(this.x,this.my);break;case n.Dir.W:t.moveTo(this.x,this.ey),t.lineTo(this.x,this.y);break;case n.Dir.NW:t.moveTo(this.x,this.my),t.lineTo(this.x,this.y),t.lineTo(this.mx,this.y)}t.stroke()}}e.DisplayCell=s,e.Display=class{constructor(t,e,i,r,n,o){this.parent=t,this.width=e,this.height=i,this.tileWidth=r,this.tileHeight=n,this.font=o,this.defaultBackground="black",this.defaultForeground="white",this.canvas=document.createElement("canvas"),this.canvas.width=e*r,this.canvas.height=i*n,this.cells=[];for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)this.cells.push(new s(this,e*this.tileWidth,t*this.tileHeight,this.tileWidth,this.tileHeight));t.append(this.canvas);const a=this.canvas.getContext("2d");if(!a)throw new Error("Could not get rendering context");a.font=o,a.textAlign="center",a.textBaseline="middle",this.ctx=a}update(){this.cells.forEach((t=>t.draw(this.ctx)))}fill(t){const e={fg:this.defaultForeground,bg:this.defaultBackground,char:t};this.cells.forEach((t=>t.set(e)))}clear(){this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}clearBorders(){this.cells.forEach((t=>t.border("transparent")))}at(t,e){return this.cells[e*this.width+t]}str(t,e,i,r,n){const s={fg:r||this.defaultForeground,bg:n||this.defaultBackground,char:""};let o=t,a=e;for(let e=0;e<i.length;e++)"\n"!==i[e]?(s.char=i[e],this.at(o++,a).set(s)):(o=t,a++)}}},9556:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnchantmentSlot=void 0,(i=e.EnchantmentSlot||(e.EnchantmentSlot={}))[i.Prefix=0]="Prefix",i[i.Suffix=1]="Suffix"},9986:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(6272),n=i(2203),s=i(7594),o=i(9699);class a extends r.Actor{constructor(t){super(t,"Enemy",o.Side.Enemy),this.ai=n.normalAI.bind(this),this.isEnemy=!0,this.bg="#200000",this.char="E",this.facing=(0,s.oneOf)(t.rng,[o.Dir.N,o.Dir.E,o.Dir.S,o.Dir.W]),this.fg="red"}}e.default=a},142:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Floor=void 0;const r=i(1512),n=i(9699);e.Floor=class{constructor(t,e,i,s){this.name=t,this.floor=e,this.width=i,this.height=s,this.map=new r.Grid(t,i,s,n.Tile.Empty),this.enemies=[],this.items=[],this.player=this.map.oob}enemyAt(t){const e=this.enemies.filter((e=>e.pos===t));return e.length?e[0]:void 0}itemAt(t){const e=this.items.filter((e=>e.pos===t));return e.length?e[0]:void 0}removeItem(t){this.items=this.items.filter((e=>e!==t))}}},9221:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=r(i(1207)),s=i(395),o=i(2929),a=i(9028),h=i(2061),c=r(i(7005)),u=r(i(670)),l=i(9349),d=i(9607),f=r(i(1205)),p=r(i(1515)),m=r(i(4778)),g=r(i(2045)),y=r(i(5619)),v=i(394),b=i(7989),w=i(7594),S=r(i(1345)),k=i(9699),x={[k.Tile.Door]:{fg:"brown",bg:"black"},[k.Tile.Space]:{fg:"#404040",bg:"black"},[k.Tile.Wall]:{fg:"#808080",bg:"black"}};e.default=class{constructor(t,e){this.parent=t,this.font=e,this.t=new S.default,this.t.enter("Game.new"),this.seed(),this.draw=this.draw.bind(this),this.display=new h.Display(t,90,40,14,18,e),this.display.str(0,0,"setting up..."),document.fonts.load(e).then((()=>{this.redraw()})),this.actors=[],this.architect=new n.default(this),this.drawTimeout=0,this.hooks=new c.default(this),this.input=new u.default(this),this.log=new f.default(this),this.noise=new p.default(this),this.player=new m.default(this,(0,w.oneOf)(this.rng,[s.Samurai,s.Ninja,s.Monk])),this.playerUI=new g.default(this),this.prompt=new y.default(this),this.seen=new Set,this.timer=0,this.ui=[this.playerUI,this.log,this.prompt],this.view=new Set,this.hooks.on("sys.advance",(({time:t})=>{this.timer+=t,this.actors.forEach((e=>e.regen(t)))})),(0,s.initClasses)(this),(0,l.initItems)(this),this.t.leave("Game.new")}seed(t){this.rng=new v.tychei(t),this.t.message("rng seed",this.rng.getSeed())}enter(t){this.t.enter("enter",t),this.f=t,this.player.pos=t.player,this.actors=[this.player,...this.f.enemies],1===t.floor&&this.log.coloured("purple",`Welcome to the Game of Rogue, young ${this.player.class.name}.`),this.seen.clear(),this.redraw(),this.input.listening=!0,this.t.leave("enter")}add(t){this.actors.push(t),this.f.enemies.push(t)}remove(t){const e=e=>e!==t;this.actors=this.actors.filter(e),this.f.enemies=this.f.enemies.filter(e)}advance(t){for(this.input.listening=!1,this.hooks.fire("sys.advance",{time:t});!this.input.listening&&!this.player.dead;){this.actors.sort(((t,e)=>t.nextMove-e.nextMove));const t=this.actors[0];if(t.isPlayer)return void(this.input.listening=!0);const e=t.nextMove;t.ai(),t.nextMove===e&&(t.nextMove=this.player.nextMove+.5)}}redraw(){this.drawTimeout||(this.drawTimeout=requestAnimationFrame(this.draw))}draw(){this.drawTimeout=0,this.display.clear(),this.view=(0,d.getSightCone)(this.player),this.view.forEach((t=>this.seen.add(t))),this.seen.forEach((t=>{this.view.has(t)?this.drawTile(t):this.drawSeenTile(t)})),this.ui.forEach((t=>t.draw())),this.display.update(),this.display.clearBorders()}drawTile(t){const e=this.display.at(t.x,t.y),i=this.f.enemyAt(t),r=this.f.itemAt(t);let n,s;if(this.player.pos===t)n=this.player,s=this.player.facing;else if(i)n=i,s=i.facing,i.aiState===k.AIState.Angry?i.target===this.player?e.border("red"):e.border("orange"):i.aiState===k.AIState.Investigating&&e.border("yellow");else if(r)n=r.token;else{const e=this.f.map.get(t.x,t.y);if(!x[e])return;n=Object.assign(Object.assign({},x[e]),{char:e})}e.set(n,s)}drawSeenTile(t){const e=this.f.itemAt(t),i={char:"?",fg:"#222",bg:"black"};let r;this.player.pos===t?(i.char=this.player.char,r=this.player.facing):e?(i.char=e.token.char,i.fg="#444"):i.char=this.f.map.get(t.x,t.y),this.display.at(t.x,t.y).set(i,r)}blockers(t){return this.actors.filter((e=>e.pos===t))}playerAct(t){if(this.player.facing!==t)return this.player.turn(t,!0);const e=this.f.map.addFacing(this.player.pos,t),i=this.blockers(e);if(i.length){const t=i[0];return t.cloneOf===this.player?((0,b.swapPositionWithClone)(this.player,t),!0):(0,a.attack)(this.player,t)}return this.player.move(e,!0)}playerMove(t){return this.playerAct(t),!0}playerSkill(t){return this.player.skills.includes(t.name)?this.player.ki<t.ki?this.log.error("Your ki is too low."):this.player.balance<t.balance?this.log.error("Your balance is off."):void t.fn(this.player):this.log.error("You don't know that skill.")}playerGet(){const t=this.player;let e=!1;const i=[],r=this.f.items.filter((e=>e.pos===t.pos));if(!r.length)return this.log.info("There's nothing here!"),!0;for(const n of r)t.carriedWeight+n.totalWeight>t.maxCarriedWeight?e=!0:(t.get(n),this.f.removeItem(n),i.push(n.name({article:!0})));return i.length&&(this.log.coloured(o.colourItems,"You pick up %an.",(0,w.niceListJoin)(i)),t.spend(1)),e&&this.log.coloured(o.colourItems,"You can't carry any more."),!0}playerEquip(){const t=this.player,e=t.inventory.filter((t=>t.type===k.ItemType.Weapon||t.type===k.ItemType.Armour));return e.length?(this.input.getChoice("Which item?",e,(t=>t.name()),(e=>{t.equip(e)&&t.spend(1)})),!0):(this.log.info("You have no equippable items!"),!0)}playerDrop(){const t=this.player;return t.inventory.length?(this.input.getChoice("Which item?",t.inventory,(t=>t.name()),(e=>{t.inventory=t.inventory.filter((t=>t!==e)),e.pos=t.pos,this.f.items.push(e),this.log.coloured(o.colourItems,"You drop %an.",e.name({article:!0}))})),!0):(this.log.info("You have no items!"),!0)}trace(t,e,i,r,n,s){const o={start:this.f.map.ref(t,e),projected:this.f.map.ref(i,r),visited:new Set,end:this.f.map.oob};let a=t,h=e;const c=(i-t)/n,u=(r-e)/n;for(let t=0;t<=n;t++){const t=this.f.map.ref(a,h);if(!o.visited.has(t)&&(o.visited.add(t),!s(t)))return o.end=t,o;a+=c,h+=u}return o}debugNewFloor(){return this.player=new m.default(this,(0,w.oneOf)(this.rng,[s.Samurai,s.Ninja,s.Monk])),this.enter(this.architect.generate(1,this.display.width-this.playerUI.width,this.display.height,200)),!0}debugShowAll(){for(let t=0;t<this.f.map.height;t++)for(let e=0;e<this.f.map.width;e++)this.drawTile(this.f.map.ref(e,t));return this.display.update(),!0}}},1512:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grid=void 0;const r=i(5601),n=i(7594);class s{constructor(t,e,i,r){this.name=t,this.width=e,this.height=i,this.init=r,this.contents=[],this.oob={x:-1,y:-1,g:this,s:Symbol(`${t}@oob`)},this.refs=[];for(let n=0;n<i;n++){const i=[],s=[];for(let o=0;o<e;o++)i.push(r),s.push({x:o,y:n,g:this,s:Symbol(`${t}@${o},${n}`)});this.contents.push(i),this.refs.push(s)}}contains(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height}ref(t,e){const i=(0,n.int)(t),r=(0,n.int)(e);return this.contains(i,r)?this.refs[r][i]:this.oob}addFacing(t,e){const i=r.dirOffsets[e];return this.ref(t.x+i.x,t.y+i.y)}get(t,e){const i=(0,n.int)(t),r=(0,n.int)(e);return this.contains(i,r)?this.contents[r][i]:this.init}set(t,e,i){const r=(0,n.int)(t),s=(0,n.int)(e);this.contents[s][r]=i}paste(t,e,i,r){for(let n=0;n<i.height;n++)if(!(e+n>=this.height))for(let s=0;s<i.width;s++)t+s>=this.width||i.get(s,n)!==r&&this.set(t+s,e+n,i.get(s,n))}find(...t){const e=[];for(let i=0;i<this.height;i++)for(let r=0;r<this.width;r++)t.includes(this.get(r,i))&&e.push(this.refs[i][r]);return e}square(t,e){const i=Math.max(0,t.x-e),r=Math.max(0,t.y-e),n=Math.min(this.width-1,t.x+e),s=Math.min(this.height-1,t.y+e),o=[];for(let t=r;t<=s;t++)for(let e=i;e<=n;e++)o.push(this.ref(e,t));return o}rotate(t){const{width:e,height:i,init:r}=this;let n;if(!t)return this;const o=`${this.name}/${t}`;n=2===t?new s(o,e,i,r):new s(o,i,e,r);for(let r=0;r<i;r++)for(let s=0;s<e;s++){let o,a;switch(t){case 1:o=i-1-r,a=s;break;case 2:o=e-1-s,a=i-1-r;break;case 3:o=r,a=e-1-s}n.set(o,a,this.get(s,r))}return n}replace(t,e){for(let i=0;i<this.height;i++)for(let r=0;r<this.width;r++)this.get(r,i)===t&&this.set(r,i,e)}toString(){return this.contents.map((t=>t.join(""))).join("\n")}}e.Grid=s},7005:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.g=t,this.listeners={}}on(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)}off(t,e){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter((t=>t!==e)))}fire(t,e){this.g.t.enter("Hooks.fire",t,e);const i=this.listeners[t];i&&i.forEach((t=>t(e))),this.g.t.leave("Hooks.fire")}}},670:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(9699);e.default=class{constructor(t){this.g=t,this.listening=!1,document.addEventListener("keydown",this.keydown.bind(this))}getChoice(t,e,i,r){let n=`${t}`;const s=new Map;for(let t=0;t<e.length;t++){const r=e[t],o=String.fromCharCode(97+t),a=i(r);s.set(o,r),n+=`\n${o}: ${a}`}this.g.prompt.show(n),this.handler=t=>{const e=s.get(t);return e?(r(e),this.g.prompt.clear(),!0):"Escape"===t&&(this.g.prompt.clear(),!0)}}getDirection(t,e){this.g.prompt.show(t);const i=t=>(e(t),this.g.prompt.clear(),!0);this.handler=t=>{switch(t){case"ArrowUp":return i(r.Dir.N);case"PageUp":return i(r.Dir.NE);case"ArrowRight":return i(r.Dir.E);case"PageDown":return i(r.Dir.SE);case"ArrowDown":return i(r.Dir.S);case"End":return i(r.Dir.SW);case"ArrowLeft":return i(r.Dir.W);case"Home":return i(r.Dir.NW)}return this.g.prompt.clear(),!0}}keydown(t){if(this.listening)return this.handler?(t.preventDefault(),void(this.handler(t.key,t.shiftKey,t.metaKey)&&(this.handler=void 0))):void(this.playerInput(t.key,t.shiftKey,t.metaKey)&&t.preventDefault())}playerInput(t,e,i){switch(t){case"ArrowUp":return this.g.playerMove(r.Dir.N);case"PageUp":return this.g.playerMove(r.Dir.NE);case"ArrowRight":return this.g.playerMove(r.Dir.E);case"PageDown":return this.g.playerMove(r.Dir.SE);case"ArrowDown":return this.g.playerMove(r.Dir.S);case"End":return this.g.playerMove(r.Dir.SW);case"ArrowLeft":return this.g.playerMove(r.Dir.W);case"Home":return this.g.playerMove(r.Dir.NW);case"d":return this.g.playerDrop();case"e":return this.g.playerEquip();case"g":return this.g.playerGet();case"1":return this.usePlayerSkill(0);case"2":return this.usePlayerSkill(1);case"r":return this.g.debugNewFloor();case"s":return this.g.debugShowAll();default:return!1}}usePlayerSkill(t){const e=this.g.player.class.skills[t];return e&&this.g.playerSkill(e),!0}}},9349:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initItems=e.dropItems=e.randomItem=e.constructItem=e.isWeapon=e.isOther=e.isArmour=void 0;const r=i(2929),n=i(5601),s=i(9556),o=i(3808),a=i(2677),h=i(3423),c=i(9587),u=i(7594),l=i(9699);class d{constructor(t,e){this.g=t,this.enchantments=[],this.token={bg:e.bg||"#202000",char:e.char||m[e.type]||"$",fg:e.fg||"yellow"},this.template=e,this.type=e.type,e.getStackAmount&&(this.count=e.getStackAmount(t))}get armour(){return this.stat("armour")}get moveTimer(){return this.stat("moveTimer")}get power(){return this.stat("power")}get sightFov(){return this.stat("sightFov")}get strength(){return this.stat("strength")}get weight(){return this.stat("weight")}get totalWeight(){return this.weight*(this.count||1)}matches(t){let e=!0;return(0,u.entries)(t).forEach((t=>{var i;(null===(i=this.template)||void 0===i?void 0:i.traits[t[0]])!==t[1]&&(e=!1)})),e}get fullName(){let t="",e="";return this.enchantments.forEach((i=>{i.slot===s.EnchantmentSlot.Prefix?t=i.name+" ":i.slot===s.EnchantmentSlot.Suffix&&(e=" "+i.name)})),`${t}${this.template.name}${e}`}name(t={}){return this.template.stacked&&!t.singular?`${this.count} ${this.fullName}`:t.article?`${this.template.article} ${this.fullName}`:this.fullName}stat(t){var e,i;let r=null!==(e=this.template[t])&&void 0!==e?e:0;const n=[null===(i=this.template.mods)||void 0===i?void 0:i.get(t),...this.enchantments.map((e=>{var i;return null===(i=e.mods)||void 0===i?void 0:i.get(t)}))].filter(u.isDefined);for(const t of n)"function"==typeof t?r=t(r):r+=t;return r}}e.default=d,e.isArmour=function(t){return t.type===l.ItemType.Armour},e.isOther=function(t){return t.type===l.ItemType.Other},e.isWeapon=function(t){return t.type===l.ItemType.Weapon};const f=[h.kusanagi],p=[c.katana,c.sai,c.shuriken,c.tanto,c.tekko,c.wakizashi,c.ya,c.yumi,a.doMaru,a.hachimaki,a.sujiBachi],m={[l.ItemType.Armour]:"[",[l.ItemType.Weapon]:")",[l.ItemType.Other]:"$"};function g(t,e,i=!0){t.t.enter("constructItem",e.name,i);const r=new d(t,e);return i&&!e.traits.legendary&&(0,u.rnd)(t.rng,100)<n.MAGIC_CHANCE&&((0,o.randomEnchant)(t,r),(0,u.rnd)(t.rng,100)<n.MAGIC_CHANCE&&(0,o.randomEnchant)(t,r)),t.t.leave("constructItem"),r}e.constructItem=g,e.randomItem=function(t,e=!0){const i=function(t){for(;;){if((0,u.rnd)(t.rng,100)<n.ARTIFACT_CHANCE)return(0,u.oneOf)(t.rng,f);const e=(0,u.oneOf)(t.rng,p);if((0,u.rnd)(t.rng,100)>=e.rarity)return e}}(t);return g(t,i,e)},e.dropItems=function(t,e){const i=[];e.inventory.concat(Object.values(e.equipment).filter(u.isDefined)).forEach((r=>{i.push(r.name({article:!0})),r.pos=e.pos,t.f.items.push(r)})),t.log.coloured(r.colourItems,"%an drop%as %bn.",e,(0,u.niceListJoin)(i))},e.initItems=function(t){t.hooks.on("player.move",(({actor:e})=>{const i=t.f.items.filter((t=>t.pos===e.pos));i.length&&t.log.info("You see here %an.",(0,u.niceListJoin)(i.map((t=>t.name({article:!0})))))}))}},1205:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(6272),s=i(2929),o=r(i(9349)),a=i(7594),h={a:0,b:1,c:2,d:3,e:4,f:5},c={n:t=>t.isPlayer?"you":t.cloneOf===t.g.player?"your clone":t.name,o:t=>t.isPlayer?"your":t.cloneOf===t.g.player?"your clone's":t.name+"'s",r:t=>t.isPlayer?"your":"their",s:t=>t.isPlayer?"":"s","#":t=>t.name};e.default=class{constructor(t,e=5,i=1){this.g=t,this.height=e,this.x=i,this.logs=[],this.y=t.display.height-1}draw(){let t=this.y;this.logs.forEach((({message:e,fg:i,bg:r})=>{this.g.display.str(this.x,t,e,i,r),t--}))}add(t){for(this.logs.unshift(t);this.logs.length>this.height;)this.logs.pop();this.g.redraw()}message(t,e,i){this.add({message:t,fg:e,bg:i})}coloured(t,e,...i){const r=this.format(e,...i);return this.message(r,t)}error(t,...e){return this.coloured(s.colourError,t,...e)}info(t,...e){return this.coloured(s.colourInfo,t,...e)}format(t,...e){return(0,a.capFirst)(t.replace(/%../g,(t=>{const i=t[1];if(!(i in h))return"?";const r=e[h[i]],s=t[2];switch((a=r)instanceof n.Actor?"actor":a instanceof o.default?"item":"string"==typeof a?"string":"number"){case"actor":return c[s](r);case"item":return r.name({singular:!0});case"string":return r;case"number":return r.toString()}var a})))}}},1515:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(7594);e.default=class{constructor(t){this.g=t,this.noises=[],t.hooks.on("sys.advance",(()=>this.tick())),t.hooks.on("architect.begin",(()=>this.clear()))}clear(){this.noises=[]}add(t,e,i,r){this.noises.push({pos:t,volume:e,source:i,ttl:this.g.timer+r})}tick(){this.noises=this.noises.filter((t=>t.ttl>this.g.timer))}closest(t){let e,i=t.hearingRange+1;for(const n of this.noises){const s=(0,r.distance)(t.pos,n.pos)-n.volume;s<i&&(i=s,e=n)}return e}}},4778:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(6272),s=i(9587),o=r(i(9349)),a=i(9699);class h extends n.Actor{constructor(t,e){super(t,"Player",a.Side.Player),this.isPlayer=!0,this.bg="#202020",this.char="@",this.facing=a.Dir.N,this.fg="white",this.level=1,this.class=e,this.apply(e),e.init(this),this.natural||(this.natural=new o.default(t,s.humanFist))}levelUp(){this.level++,this.base.hpMax+=this.class.hpGain,this.base.kiMax+=this.class.kiGain,this.base.strength+=this.class.strGain}}e.default=h},2045:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(7594),n=i(9699);e.default=class{constructor(t,e=20){this.g=t,this.width=e,this.x=t.display.width-e,this.y=0}draw(){const t=this.g.player,e=Math.floor;this.y=0,this.str(t.name,"silver"),this.str(`${t.class.name}, Level ${t.level}`,"silver"),this.y++,this.stat("HP",`${e(t.hp)} / ${e(t.hpMax)}`),this.stat("Ki",`${e(t.ki)} / ${e(t.kiMax)}`),this.stat("Balance",`${e(t.balance)}%`),this.y++;const i=this.powerModifier(!1),s=this.powerModifier(!0);this.stat("Strength",`${e(t.strength)} ${(0,r.bonusText)(i)}${null!==s?"/"+(0,r.bonusText)(s):""}`),this.stat("Armour",`${e(t.armour)}`),this.y++,t.equipment.primary?this.drawItem(n.ItemSlot.Primary):t.equipment.both?this.drawItem(n.ItemSlot.BothHands):this.y++,this.drawItem(n.ItemSlot.Secondary),this.drawItem(n.ItemSlot.Body),this.drawItem(n.ItemSlot.Head)}str(t,e,i){this.g.display.str(this.x,this.y++,t,e,i)}stat(t,e){this.g.display.str(this.x,this.y,t+":","silver"),this.g.display.str(this.x+t.length+2,this.y++,e,"white")}drawItem(t){const e=this.g.player.equipment[t];e?(this.str("  "+e.name(),"silver"),this.g.display.at(this.x,this.y-1).set(e.token)):this.y++}powerModifier(t){const e=this.g.player;return t?e.equipment.secondary?e.equipment.secondary.power:null:e.equipment.primary?e.equipment.primary.power:e.equipment.both?e.equipment.both.power:0}}},5619:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e=5,i=5){this.g=t,this.x=e,this.y=i}show(t){this.text=t,this.g.redraw()}clear(){this.text=void 0,this.g.redraw()}draw(){this.text&&this.g.display.str(this.x,this.y,this.text,"yellow")}}},394:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.tychei=void 0;const n=r(i(6377));function s(t){return(t>>>0).toString(36)}function o(t){return~~parseInt(t,36)}e.tychei=class extends class{constructor(t,e){this.gen=t,this.setSeed(e)}next(){return this.impl()}setSeed(t){const e=t?this.parseSeed(t):this.randomState();this.impl=this.gen(void 0,{state:e})}}{constructor(t){super(n.default.tychei,t),this.name="tychei"}getSeed(){const t=this.impl.state();return[t.a,t.b,t.c,t.d].map(s).join(".")}parseSeed(t){const e=t.split(".");return{a:o(e[0]),b:o(e[1]),c:o(e[2]),d:o(e[3])}}randomState(){return this.gen(Math.random().toString(),{state:!0}).state()}}},1345:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.level=0,this.on=!0}enter(t,...e){this.message(t,...e),this.level++}message(t,...e){this.on&&console.log(this.space()+t,...e)}todo(t,...e){return this.message("TODO:"+t,...e)}leave(t){this.level--}space(){let t="";for(let e=0;e<this.level;e++)t+="> ";return t}}},395:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initClasses=e.Taoist=e.Monk=e.Ninja=e.Samurai=void 0;const r=i(2677),n=i(9587),s=i(9349),o=i(7989),a=i(5854),h=i(2834),c=i(5526);e.Samurai={name:"Samurai",hp:12,hpGain:4,ki:8,kiGain:3,str:10,strGain:1,skills:[c.Sweep],init:t=>{t.equip((0,s.constructItem)(t.g,n.wakizashi,!1)),t.equip((0,s.constructItem)(t.g,r.doMaru,!1)),t.get((0,s.constructItem)(t.g,n.yumi,!1)),t.get((0,s.constructItem)(t.g,n.ya,!1)),t.skills.push(c.Sweep.name)}},e.Ninja={name:"Ninja",hp:6,hpGain:2,ki:10,kiGain:4,str:4,strGain:0,skills:[o.Clone,h.Substitute],init:t=>{t.equip((0,s.constructItem)(t.g,n.tanto,!1)),t.equip((0,s.constructItem)(t.g,n.shuriken,!1)),t.skills.push(o.Clone.name),t.skills.push(h.Substitute.name)}},e.Monk={name:"Monk",hp:10,hpGain:3,ki:12,kiGain:4,str:8,strGain:.5,skills:[a.Kick],init:t=>{t.equip((0,s.constructItem)(t.g,r.hachimaki,!1)),t.skills.push(a.Kick.name)}},e.Taoist={name:"Taoist",hp:4,hpGain:1,ki:14,kiGain:6,str:2,strGain:0,skills:[],init:t=>{t.g.t.todo("Taoist.init")}},e.initClasses=function(t){t.hooks.on("sys.advance",(()=>(0,h.expireSubstitute)(t)))}},2929:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.colourDeath=e.colourError=e.colourEnemyHit=e.colourPlayerHit=e.colourItems=e.colourInfo=void 0,e.colourInfo="white",e.colourItems="gray",e.colourPlayerHit="maroon",e.colourEnemyHit="orange",e.colourError="yellow",e.colourDeath="red"},9028:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.combatAlert=e.attack=e.damage=e.kill=void 0;const r=i(2929),n=i(5601),s=i(9349),o=i(2834),a=i(7594),h=i(9699);function c(t,e){const i=t.g;e.dead=!0,e.target=void 0,e.targetPos=void 0,e.isPlayer?(i.log.coloured(r.colourDeath,"You died!"),i.hooks.fire("player.died",{attacker:t,victim:e})):(e.cloneOf?i.log.coloured(r.colourDeath,"%an vanishes with a puff of smoke!",e):e.aiState===h.AIState.Angry?(i.log.coloured(r.colourDeath,"%an screams as they die!",e),i.noise.add(e.pos,8,e,2)):i.log.coloured(r.colourDeath,"%an falls to the ground, dead!",e),i.hooks.fire("enemy.died",{attacker:t,victim:e}),(0,s.dropItems)(i,e)),i.remove(e)}function u(t,e,i){return e.hp-=i,e.isPlayer?t.g.hooks.fire("player.hit",{attacker:t,victim:e}):t.g.hooks.fire("enemy.hit",{attacker:t,victim:e}),!(e.hp<1&&(c(t,e),1))}function l(t,e,i){if(e.dead)return 0;if(e.substituteActive)return(0,o.applyNinjaSubstitute)(e,t),-100;let r=t.strength/n.STRENGTH_RATIO+i.power;return r=function(t,e,i){const r=(0,a.getCardinalDirectionBetween)(e.pos,t.pos),n=(0,a.getCardinalAngleBetween)(r,e.facing);let s=e.armour;return 1===n?s*=.75:0===n&&(s*=.25),s>i?0:Math.floor(i-s)}(t,e,r),t.g.log.info("%ao %cn hits %bn for %d#.",t,e,i,r),r>0&&u(t,e,r),r}function d(t,e){e.isEnemy&&(e.aiHurtBy=t)}e.kill=c,e.damage=u,e.attack=function(t,e){let i=0,r=0,n=0,s=!1;const o=t.getPrimaryWeapon();if(o){const a=l(t,e,o);-100===a?s=!0:i+=a,r+=o.weight||0,n+=o.moveTimer}if(!s){const s=t.getSecondaryWeapon();s&&!s.template.ammo&&e.alive&&(i+=l(t,e,s),r+=s.weight||0,n+=s.moveTimer)}return t.balance-=r,d(t,e),t.spend(n),t.g.redraw(),!0},e.combatAlert=d},5601:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.dirAngles=e.dirOffsets=e.STRENGTH_RATIO=e.TIMER_FREQUENCY=e.LIGHTS_FRAGMENTS=e.LIGHTS_STEP=e.ARTIFACT_CHANCE=e.MAGIC_CHANCE=e.ARCHITECT_MIN_ENEMIES=e.ARCHITECT_MIN_ROOMS=e.ARCHITECT_ATTEMPTS=void 0;const r=i(9699);e.ARCHITECT_ATTEMPTS=1e3,e.ARCHITECT_MIN_ROOMS=6,e.ARCHITECT_MIN_ENEMIES=10,e.MAGIC_CHANCE=5,e.ARTIFACT_CHANCE=1,e.LIGHTS_STEP=1,e.LIGHTS_FRAGMENTS=3,e.TIMER_FREQUENCY=50,e.STRENGTH_RATIO=3,e.dirOffsets={[r.Dir.N]:{x:0,y:-1},[r.Dir.NE]:{x:1,y:-1},[r.Dir.E]:{x:1,y:0},[r.Dir.SE]:{x:1,y:1},[r.Dir.S]:{x:0,y:1},[r.Dir.SW]:{x:-1,y:1},[r.Dir.W]:{x:-1,y:0},[r.Dir.NW]:{x:-1,y:-1}},e.dirAngles={[r.Dir.N]:270,[r.Dir.NE]:315,[r.Dir.E]:0,[r.Dir.SE]:45,[r.Dir.S]:90,[r.Dir.SW]:135,[r.Dir.W]:180,[r.Dir.NW]:225}},6724:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.EnemyNinja=void 0;const n=i(395),s=r(i(9986)),o=i(9587),a=i(9349),h=i(1397),c=i(7594);class u extends s.default{constructor(t){super(t),this.char="N",this.name=(0,h.randomName)(t),this.apply(n.Ninja),this.aiTraits.investigatesNoises=!0,0===(0,c.rnd)(t.rng,4)?(this.equip((0,a.constructItem)(t,o.sai)),this.equip((0,a.constructItem)(t,o.sai))):(this.equip((0,a.constructItem)(t,o.tanto)),this.equip((0,a.constructItem)(t,o.shuriken)))}}e.EnemyNinja=u},8925:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.EnemySamurai=void 0;const n=i(395),s=r(i(9986)),o=i(2677),a=i(9587),h=i(9349),c=i(1397),u=i(7594);class l extends s.default{constructor(t){super(t),this.char="S",this.name=(0,c.randomName)(t),this.apply(n.Samurai),this.aiTraits.investigatesNoises=!0,this.aiTraits.yellsOnSight=5,0===(0,u.rnd)(t.rng,4)?this.equip((0,h.constructItem)(t,a.katana)):0===(0,u.rnd)(t.rng,3)?(this.equip((0,h.constructItem)(t,a.yumi)),this.equip((0,h.constructItem)(t,a.ya))):this.equip((0,h.constructItem)(t,a.wakizashi)),0===(0,u.rnd)(t.rng,3)&&this.equip((0,h.constructItem)(t,o.doMaru)),0===(0,u.rnd)(t.rng,3)&&this.equip((0,h.constructItem)(t,o.sujiBachi))}}e.EnemySamurai=l},3808:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomEnchant=e.applyEnchant=void 0;const r=i(9556),n=i(7594),s=i(9699),o=[{name:"of a master",slot:r.EnchantmentSlot.Suffix,type:s.ItemType.Armour,mods:new Map([["armour",1]])},{name:"jade-handled",slot:r.EnchantmentSlot.Prefix,type:s.ItemType.Weapon,mods:new Map([["strength",1]]),traits:{handle:!0}},{name:"of gore",slot:r.EnchantmentSlot.Suffix,type:s.ItemType.Weapon,mods:new Map([["strength",1]])},{name:"feather-light",slot:r.EnchantmentSlot.Prefix,rarity:50,mods:new Map([["moveTimer",t=>.9*t],["weight",t=>.9*t]])}];function a(t,e){t.enchantments.push(e)}e.applyEnchant=a,e.randomEnchant=function(t,e){const i=o.filter((t=>function(t,e){if(e.type&&t.type!==e.type)return!1;if(e.traits)for(const i of(0,n.keys)(e.traits)){const r=e.traits[i];if(!0===r&&!t.template.traits[i])return!1;if(!1===r&&t.template.traits[i])return!1}return!0}(e,t)));if(!i.length)return console.error(`No valid enchantments for ${e.name()}`),!1;for(;;){const r=(0,n.oneOf)(t.rng,i);if((0,n.rnd)(t.rng,100)>=(r.rarity||1))return a(e,r),void t.t.message("enchanted",e,r)}}},3607:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(7654);const n=r(i(9221));window.addEventListener("load",(()=>{const t=document.getElementById("game-container");if(!t)throw new Error("Could not find #game-container");const e=new n.default(t,'300 15px "Roboto Mono", monospace');window.G=e,e.debugNewFloor()}))},2677:function(t,e,i){"use strict";var r=this&&this.__rest||function(t,e){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(i[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(i[r[n]]=t[r[n]])}return i};Object.defineProperty(e,"__esModule",{value:!0}),e.sujiBachi=e.hachimaki=e.doMaru=void 0;const n=i(9699);function s(t){var{article:e="a",rarity:i=1,traits:s={},weight:o=0}=t,a=r(t,["article","rarity","traits","weight"]);return Object.assign({article:e,type:n.ItemType.Armour,weight:o,traits:s,rarity:i,stacked:!1},a)}e.doMaru=s({name:"dō-maru",slot:n.ItemSlot.Body,weight:5,armour:3}),e.hachimaki=s({name:"hachimaki",slot:n.ItemSlot.Head,armour:0}),e.sujiBachi=s({name:"suji bachi",slot:n.ItemSlot.Head,weight:2,armour:1,sightFov:-20})},3423:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.kusanagi=void 0;const r=i(9699);e.kusanagi={name:"Kusanagi-no-Tsurugi",article:"the",type:r.ItemType.Weapon,hands:2,offhand:!1,power:8,weight:4,traits:{handle:!0,blade:!0,sword:!0,legendary:!0},moveTimer:1,missile:!1,thrown:!1,ammo:!1,stacked:!1,listeners:{"player.attack":t=>{}},rarity:1}},9587:function(t,e,i){"use strict";var r=this&&this.__rest||function(t,e){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(i[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(i[r[n]]=t[r[n]])}return i};Object.defineProperty(e,"__esModule",{value:!0}),e.humanFist=e.yumi=e.ya=e.wakizashi=e.tekko=e.tanto=e.shuriken=e.sai=e.katana=void 0;const n=i(7594),s=i(9699);function o(t){var{article:e="a",type:i=s.ItemType.Weapon,rarity:n=1,traits:o={},weight:a=0,offhand:h=!1,moveTimer:c=1,thrown:u=!1,stacked:l=!1,ammo:d=!1,hands:f=(d?0:1),missile:p=!1}=t,m=r(t,["article","type","rarity","traits","weight","offhand","moveTimer","thrown","stacked","ammo","hands","missile"]);return Object.assign({article:e,type:i,weight:a,traits:o,rarity:n,stacked:l,hands:f,offhand:h,moveTimer:c,thrown:u,ammo:d,missile:p},m)}e.katana=o({name:"katana",hands:2,power:3,weight:5,moveTimer:1.1,traits:{handle:!0,blade:!0,sword:!0}}),e.sai=o({name:"sai",offhand:!0,power:1,weight:1,moveTimer:.7,rarity:10,traits:{handle:!0,blade:!0,sword:!0}}),e.shuriken=o({name:"shuriken",char:"*",power:1,moveTimer:.5,offhand:!0,thrown:!0,stacked:!0,getStackAmount:t=>(0,n.rnd)(t.rng,5)+1,traits:{blade:!0,missile:!0}}),e.tanto=o({name:"tantō",power:1,weight:1,moveTimer:.8,traits:{handle:!0,blade:!0,knife:!0}}),e.tekko=o({name:"tekkō",article:"a pair of",hands:2,power:1,weight:1,moveTimer:.9,traits:{handle:!0,blade:!0,fist:!0}}),e.wakizashi=o({name:"wakizashi",power:2,weight:3,traits:{blade:!0,handle:!0,sword:!0}}),e.ya=o({name:"ya",hands:0,offhand:!0,power:3,weight:0,moveTimer:0,ammo:!0,firedBy:{bow:!0},stacked:!0,getStackAmount:t=>(0,n.rnd)(t.rng,4)+1,traits:{point:!0,missile:!0,arrow:!0}}),e.yumi=o({name:"yumi",hands:2,power:0,weight:3,moveTimer:1.5,missile:!0,traits:{bow:!0,wood:!0}}),e.humanFist=o({name:"fist",article:"your",hands:2,power:0})},9607:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getVisibleEnemies=e.canSee=e.getSightCone=void 0;const r=i(5601),n=i(7594),s=i(9699);function o(t){const e=new Set,i=(0,n.mid)(t.pos.x),o=(0,n.mid)(t.pos.y);let a=-t.sightFov/2;const h=r.dirAngles[t.facing];let c=h+a;c<0&&(c+=360);let u=c;const l=t.sightFov/r.LIGHTS_STEP+1;for(let c=0;c<l;c++){u=h+a,u<0&&(u+=360);const c=(0,n.deg2rad)(u),l=i+t.sightRange*Math.cos(c),d=o+t.sightRange*Math.sin(c),f=t.g.trace(i,o,l,d,t.sightRange*r.LIGHTS_FRAGMENTS,(e=>e===t.pos||t.g.f.map.get(e.x,e.y)===s.Tile.Space));a+=r.LIGHTS_STEP,f.visited.forEach((t=>e.add(t)))}return e}e.getSightCone=o,e.canSee=function(t,e){return o(t).has(e)},e.getVisibleEnemies=function(t){const e=o(t);return t.g.actors.filter((i=>i.side!==t.side&&e.has(i.pos)))}},1397:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomName=void 0;const r=i(7594),n=["Akio","Akira","Daichi","Daiki","Daisuke","Eita","Gō","Haruma","Haruto","Hayato","Hinata","Hiroki","Hiroshi","Hiroto","Isamu","Itsuki","Kaito","Kan","Katsumi","Kazuki","Kazuya","Keisuke","Kenta","Kenzō","Kiyoshi","Kotarō","Kōhei","Makoto","Manabu","Masahiro","Masao","Masaru","Minato","Minoru","Naoki","Nobu","Osamu","Ren","Riku","Ryō","Ryūnosuke","Saburo","Shigeru","Shin","Shin'ichi","Shiro","Shō","Shōta","Shun","Sora","Sōta","Sōma","Susumu","Tadashi","Taiga","Taiki","Takashi","Takeo","Takeru","Takeshi","Takumi","Takuya","Tetsuya","Tsubasa","Tsuyoshi","Yamato","Yoshio","Yōta","Yuuta","Yutaka","Yuuto","Yuudai","Yuuma"],s=["Ai","Aiko","Aimi","Airi","Akemi","Amaya","Ana","Aoi","Ayaka","Ayami","Ayano","Beniko","Chinatsu","Chiyo","Chiyoko","Emi","Fumiko","Hana","Haruka","Haruna","Himari","Hina","Hiroko","Hitomi","Hotaru","Kaori","Kasumi","Kazuko","Kazumi","Keiko","Kiriko","Koharu","Kumiko","Mai","Mami","Mana","Mayumi","Megumi","Mei","Midori","Mina","Misaki","Miu","Miyu","Moe","Momoko","Nanami","Naoko","Naomi","Natsuki","Noriko","Reika","Riko","Rin","Sachiko","Sadako","Saki","Sakura","Satsuki","Saya","Sayuri","Setsuko","Shigeko","Shizuka","Teiko","Tomoko","Tomomi","Umeko","Yoko","Yoshiko","Yōko","Yua","Yui","Yukiko","Yuuma","Yumi","Yumiko","Yuna","Yuriko","Yuuka","Yuuna","Yuzuki"],o=["Satō","Suzuki","Takahashi","Tanaka","Watanabe","Itō","Yamamoto","Nakamura","Kobayashi","Katō","Yoshida","Yamada","Sasaki","Yamaguchi","Saitō","Matsumoto","Inoue","Kimura","Hayashi","Shimizu","Yamazaki","Nakajima","Mori","Abe","Ikeda","Hashimoto","Ishikawa","Yamashita","Ogawa","Ishii","Hasegawa","Gotō","Okada","Kondō","Maeda"];function a(t){const e=(0,r.oneOf)(t.rng,[n,s]),i=(0,r.oneOf)(t.rng,e);return`${(0,r.oneOf)(t.rng,o)} ${i}`}const h=["Wáng","Lǐ","Zhāng","Liú","Chén","Yáng","Huáng","Zhào","Wú","Zhōu","Xú","Sūn","Mǎ","Zhū","Hú","Guō","Hé","Gāo","Lín","Luó"],c=["Lì","Wěi","Fāng","Xiùyīng","Nà","Mǐn","Jìng","Qiáng","Lěi","Jūn","Yáng","Yǒng","Yàn","Jié","Juān","Tāo","Míng","Chāo","Xiùlán","Xiá","Píng","Gāng"];function u(t){const e=(0,r.oneOf)(t.rng,c);return`${(0,r.oneOf)(t.rng,h)} ${e}`}const l=["Kim","Lee","Park","Jung","Choi","Cho","Kang","Yoon","Im","Jang","Shin","Yoo","Han","Oh","Seo","Jeon","Kwon","Hwang","Ahn","Song","Hong","Yang","Ko","Moon","Son","Bae","Baek","Heo","Noh","Nam","Shim","Ha","Joo","Koo","Sung","Cha","Woo","Jin","Min","Na","Ji","Eom","Byun","Chae","Won","Bang","Cheon"],d=["Kyung","Kwang","Kyu","Ki","Nam","Da","Dae","Do","Dong","Man","Myung","Mun","Mi","Min","Bo","Beom","Byung","Sang","Seo","Seok","Seon","Seol","Seong","Se","So","Soo","Soon","Shi","Shin","Seung","Yeon","Young","Ye","Yong","Woo","Won","Yoo","Yoon","In","Eun","Jae","Jung","Jong","Joo","Joon","Ji","Jin","Chang","Chae","Chul","Chun","Tae","Ha","Han","Hae","Ho","Hong","Hyo","Hyun","Hyung","Hye","Hee"],f=["Kyung","Geun","Gi","Nam","Mi","Min","Bin","Seok","Seon","Seong","Soo","Sook","Sik","Ah","Yeon","Young","Ok","Yong","Woo","Wook","Woong","Yoon","Won","Il","Eun","Ja","Jae","Jung","Joo","Joon","Ji","Jin","Chul","Tae","Han","Ha","Hyuk","Hyun","Hye","Ho","Hwa","Hwan","Hon","Hee"];function p(t){const e=(0,r.oneOf)(t.rng,l),i=(0,r.oneOf)(t.rng,d);for(;;){const n=(0,r.oneOf)(t.rng,f);if(i!==n)return`${e} ${i}-${n.toLowerCase()}`}}e.randomName=function(t){return(0,r.oneOf)(t.rng,[a,u,p])(t)}},4945:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.makePath=void 0;const r=i(7594),n=i(9699);function s(t,e){let i,r=1/0;for(const n of t){const t=e.get(n)||1/0;t<r&&(i=n,r=t)}return i}function o(t,e){const i=[],r=e.x>0,n=e.y>0,s=e.x<t.map.width-1,o=e.y<t.map.height-1;return r&&(i.push(t.map.ref(e.x-1,e.y)),n&&i.push(t.map.ref(e.x-1,e.y-1)),o&&i.push(t.map.ref(e.x-1,e.y+1))),n&&i.push(t.map.ref(e.x,e.y-1)),s&&(i.push(t.map.ref(e.x+1,e.y)),n&&i.push(t.map.ref(e.x+1,e.y-1)),o&&i.push(t.map.ref(e.x+1,e.y+1))),o&&i.push(t.map.ref(e.x,e.y+1)),i}function a(t,e){const i=[e];let r=e;for(;t.has(r);){const e=t.get(r);if(!e)break;r=e,i.unshift(r)}return i}e.makePath=function(t,e,i){const h=new Set,c=new Set([e]),u=new Map,l=new Map;l.set(e,0);const d=new Map;for(d.set(e,(0,r.distance)(e,i));c.size;){const e=s(c,d);if(!e)break;if(e===i)return a(u,i);c.delete(e),h.add(e);const f=(l.get(e)||0)+1;o(t,e).forEach((s=>{if(!h.has(s)&&t.map.get(s.x,s.y)!==n.Tile.Wall){if(c.has(s)){if(f>=(l.get(s)||0))return}else c.add(s);u.set(s,e),l.set(s,f),d.set(s,f+(0,r.distance)(s,i))}}))}}},6248:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rooms=void 0;const r=i(1512),n=i(9885);e.rooms=n.keys().map((t=>function(t,e){const i=e.replace(/[\r\n]*$/,"").replace(/\r/g,"").split("\n"),n=new r.Grid(t,i[0].length,i.length,"");for(let t=0;t<n.height;t++)for(let e=0;e<n.width;e++)n.set(e,t,i[t][e]);return n}(t,n(t).default)))},7989:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.swapPositionWithClone=e.Clone=void 0;const r=i(9028),n=i(6724),s=i(7594);function o(){return this.lifetime<=this.g.timer&&((0,r.kill)(this,this),!1)}e.Clone={name:"Clone",balance:0,ki:5,moveTimer:.5,fn:t=>{const i=t.g,r=t.skillsMastered.includes(e.Clone.name);let a=i.f.map.addFacing(t.pos,t.facing);if((0,s.isBlocked)(i,a)&&(a=(0,s.findSpace)(i,t.pos,1),!a))return t.isPlayer&&i.log.error("There's no space for a clone!"),!1;t.ki-=e.Clone.ki,t.balance-=e.Clone.balance,t.isPlayer?i.log.info("You conjure a copy of yourself."):i.log.info("A flash of light catches you off guard... now you're seeing double!");const h=r?t.hpMax/2:1,c=r?1/0:10,u=new n.EnemyNinja(i);return u.isEnemy=t.isEnemy,u.pos=a,u.name=t.name,u.hp=u.base.hpMax=h,u.ai=o.bind(u),u.cloneOf=t,u.side=t.side,u.lifetime=i.timer+c,u.char=t.char,u.fg=t.fg,u.bg=t.bg,u.facing=t.facing,i.add(u),t.spend(e.Clone.moveTimer),!0}},e.swapPositionWithClone=function(t,e){const i=t.g,r=t.pos,n=t.facing,s=e.pos,o=e.facing;t.pos=s,t.facing=o,e.pos=r,e.facing=n,i.actors.forEach((i=>{i.target===t?(i.target=e,console.log(i.name,"target reassigned to clone.")):i.target===e&&(i.target=t,console.log(i.name,"target reassigned to ninja."))})),t.isPlayer&&(i.log.info("You quickly swap places with your clone."),i.hooks.fire("player.move",{actor:t,from:s}))}},5854:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Kick=void 0;const r=i(1207),n=i(2929),s=i(9028),o=i(5601),a=i(9699);e.Kick={name:"Kick",balance:3,ki:3,moveTimer:1,fn:t=>{const i=t.g,h=o.dirOffsets[t.facing],c=i.f.map.addFacing(t.pos,t.facing),u=i.blockers(c);if(!u.length)return i.log.error("There's nobody in front of you."),!1;const l=u[0],d=l.pos;i.log.coloured(l.isPlayer?n.colourPlayerHit:n.colourEnemyHit,"%ao foot smashes into %bo chest!",t,l),t.ki-=e.Kick.ki,t.balance-=e.Kick.balance;const f=i.f.map.width,p=i.f.map.height;let m=t.strength,g=t.skillsMastered.includes(e.Kick.name)?1/0:5;for(;g>0;){const e=l.pos.x,o=l.pos.y,c=e+h.x,u=o+h.y,d=i.f.map.ref(c,u),y=i.f.map.get(c,u),v=i.blockers(d);if(y===a.Tile.Wall||y===a.Tile.Door){const e=(0,r.describeTile)(y);let n=!1;c>0&&c<f-1&&u>0&&u<p-1&&(n=!0,i.noise.add(d,12,t,3),i.f.map.set(c,u,a.Tile.Space),i.f.map.square(d,1).forEach((t=>{i.f.map.get(t.x,t.y)===a.Tile.Empty&&i.f.map.set(t.x,t.y,a.Tile.Wall)})));const s=n?", destroying it!":"!";i.log.info(`%an plow%as into ${e}${s}`,l),m*=1.5,g=0}else if(v.length){const e=v[0];i.log.coloured(e.isPlayer||l.isPlayer?n.colourPlayerHit:n.colourEnemyHit,"%an plow%as into %bn!",l,e),i.noise.add(d,6,t,3),(0,s.damage)(t,e,m),m*=1.5,g=0}l.pos=d,g--}return l.isPlayer&&i.hooks.fire("player.move",{actor:l,from:d}),(0,s.damage)(t,l,m)&&(i.log.info("%an stagger%as to a stop.",l),(0,s.combatAlert)(t,l)),t.spend(e.Kick.moveTimer),!0}}},2834:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applyNinjaSubstitute=e.expireSubstitute=e.Substitute=void 0;const r=i(9607),n=i(7594),s=i(9699);e.Substitute={name:"Substitute",balance:10,ki:3,moveTimer:.1,fn:t=>{if(t.substituteActive)return t.isPlayer&&t.g.log.error("You already have a substitute ready."),!1;const i=t.skillsMastered.includes(e.Substitute.name)?7:2;return t.ki-=e.Substitute.ki,t.balance-=e.Substitute.balance,t.isPlayer&&t.g.log.info("You ready a substitute."),t.substituteActive=!0,t.substituteTimer=t.g.timer+i,t.spend(e.Substitute.moveTimer),!0}},e.expireSubstitute=function(t){t.actors.forEach((t=>{t.substituteActive&&t.substituteTimer<=t.g.timer&&(t.substituteActive=!1,t.isPlayer&&t.g.log.info("Your substitute is no longer ready."))}))},e.applyNinjaSubstitute=function(t,i){const o=t.g;t.substituteActive=!1,t.isPlayer?o.log.info("%an hits your substitute!",i):i.isPlayer?o.log.info("You strike cleanly, but you hit a decoy!"):o.log.info("%an hits a decoy of %bn!",i,t);const a=t.skillsMastered.includes(e.Substitute.name)?5:3,h=o.f.map.square(t.pos,a).filter((t=>!(0,n.isBlocked)(o,t)));if(h.length){const e=(0,r.getSightCone)(i),a=h.filter((t=>!e.has(t)));if(a.length){const e=t.pos;t.pos=(0,n.oneOf)(o.rng,a),i.target===t&&(i.aiState=s.AIState.Passive,i.target=void 0),t.isPlayer&&(o.log.info("You teleport to relative safety."),o.hooks.fire("player.move",{actor:t,from:e}))}}}},5526:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sweep=void 0;const r=i(9028),n=i(5601),s=i(9699),o={[s.Dir.N]:[s.Dir.NE,s.Dir.E,s.Dir.SE,s.Dir.S],[s.Dir.NE]:[s.Dir.E,s.Dir.SE,s.Dir.S,s.Dir.SW],[s.Dir.E]:[s.Dir.SE,s.Dir.S,s.Dir.SW,s.Dir.W],[s.Dir.SE]:[s.Dir.S,s.Dir.SW,s.Dir.W,s.Dir.NW],[s.Dir.S]:[s.Dir.SW,s.Dir.W,s.Dir.NW,s.Dir.N],[s.Dir.SW]:[s.Dir.W,s.Dir.NW,s.Dir.N,s.Dir.NE],[s.Dir.W]:[s.Dir.NW,s.Dir.N,s.Dir.NE,s.Dir.E],[s.Dir.NW]:[s.Dir.N,s.Dir.NE,s.Dir.E,s.Dir.SE]};function a(t,e,i){const n=t.g.f.map.ref(e+t.pos.x,i+t.pos.y);t.g.blockers(n).forEach((e=>(0,r.attack)(t,e)))}e.Sweep={name:"Skill",balance:0,ki:2,moveTimer:1.5,fn:t=>(t.g.input.getDirection("Turn to which direction?",(i=>{if(t.facing===i)return void t.g.log.error("You're already facing that way!");t.ki-=e.Sweep.ki;const r=t.facing;let s=r;const h=function(t,e){return o[t].includes(e)?1:-1}(t.facing,i);for(t.g.log.info("%an sweep%as %ar %bn!",t,"weapon");s!==i;){s+=h,s<0&&(s+=8),s>7&&(s-=8);const i=n.dirOffsets[s];a(t,i.x,i.y),t.balance-=e.Sweep.balance}t.facing=s,t.isPlayer&&(t.g.hooks.fire("player.turn",{actor:t,from:r}),t.g.redraw()),t.spend(e.Sweep.moveTimer)})),!0)}},7594:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.niceListJoin=e.isBlocked=e.findSpace=e.distance=e.getCardinalAngleBetween=e.getDirectionBetween=e.getCardinalDirectionBetween=e.bonusText=e.capFirst=e.mid=e.deg2rad=e.keys=e.entries=e.any=e.oneOf=e.rnd=e.int=e.isDefined=void 0;const r=i(9699);function n(t){return Math.floor(t)}function s(t,e){return n(t.next()*e)}e.isDefined=function(t){return void 0!==t},e.int=n,e.rnd=s,e.oneOf=function(t,e){if(!e.length)throw new Error("called oneOf on empty list");return e[s(t,e.length)]},e.any=function(t,e){for(const i of t)if(e(i))return!0;return!1},e.entries=Object.entries,e.keys=Object.keys;const o=2*Math.PI;e.deg2rad=function(t){return o*t/360},e.mid=function(t){return Math.round(t)+.499},e.capFirst=function(t){return t.slice(0,1).toUpperCase()+t.slice(1)},e.bonusText=function(t){return t<0?`${t}`:`+${t}`},e.getCardinalDirectionBetween=function(t,e){const i=t.x-e.x,n=t.y-e.y,s=Math.abs(i),o=Math.abs(n);return i<0&&s>=o?r.Dir.W:i>0&&s>=o?r.Dir.E:n<0?r.Dir.N:r.Dir.S};const a=Math.PI/4;function h(t,e){const i=t.f.map.get(e.x,e.y);return t.blockers(e).length>0||i!==r.Tile.Space}e.getDirectionBetween=function(t,e){const i=e.y-t.y,n=e.x-t.x,s=Math.atan2(i,n)+a/2,o=Math.floor(s/a)+3;return[r.Dir.NW,r.Dir.N,r.Dir.NE,r.Dir.E,r.Dir.SE,r.Dir.S,r.Dir.SW,r.Dir.W][o]},e.getCardinalAngleBetween=function(t,e){return t===e?0:t===r.Dir.N&&e===r.Dir.S||t===r.Dir.E&&e===r.Dir.W||t===r.Dir.S&&e===r.Dir.N||t===r.Dir.W&&e===r.Dir.E?2:1},e.distance=function(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)},e.findSpace=function(t,e,i){for(let r=0;r<1e3;r++){const r=s(t.rng,2*i)-i,n=s(t.rng,2*i)-i,o=t.f.map.ref(e.x+r,e.y+n);if(!h(t,o))return o}},e.isBlocked=h,e.niceListJoin=function(t){return 0===t.length?"nothing":1===t.length?t[0]:2===t.length?`${t[0]} and ${t[1]}`:t.slice(0,-1).join(", ")+" and "+t.at(-1)}},9699:(t,e)=>{"use strict";var i,r,n,s,o,a;Object.defineProperty(e,"__esModule",{value:!0}),e.AIState=e.Side=e.Dir=e.ItemSlot=e.ItemType=e.Tile=void 0,(a=e.Tile||(e.Tile={})).Door="+",a.Empty=" ",a.Space=".",a.Wall="#",a.NotDoor="d",a.Enemy="E",a.Treasure="$",a.Player="@",(o=e.ItemType||(e.ItemType={})).Armour="[",o.Weapon=")",o.Other="$",(s=e.ItemSlot||(e.ItemSlot={})).Body="body",s.Head="head",s.Primary="primary",s.Secondary="secondary",s.BothHands="both",(n=e.Dir||(e.Dir={}))[n.N=0]="N",n[n.NE=1]="NE",n[n.E=2]="E",n[n.SE=3]="SE",n[n.S=4]="S",n[n.SW=5]="SW",n[n.W=6]="W",n[n.NW=7]="NW",(r=e.Side||(e.Side={}))[r.Player=0]="Player",r[r.Enemy=1]="Enemy",(i=e.AIState||(e.AIState={}))[i.Passive=0]="Passive",i[i.Investigating=1]="Investigating",i[i.Angry=2]="Angry"},9885:(t,e,i)=>{var r={"./ambush-yard.txt":4319,"./bend.txt":8158,"./grand-hall.txt":1083,"./guarded-vault.txt":5490,"./junction.txt":5705,"./long-corridor.txt":8141,"./room-and-walkway.txt":4109,"./small-treasure.txt":7871,"./t-junction.txt":496,"./tiny-pillar-hall.txt":267,"./yard.txt":9809};function n(t){var e=s(t);return i(e)}function s(t){if(!i.o(r,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return r[t]}n.keys=function(){return Object.keys(r)},n.resolve=s,t.exports=n,n.id=9885},5002:(t,e,i)=>{"use strict";t.exports=i.p+"912f37f02592a7832c71.ttf"},2721:(t,e,i)=>{"use strict";t.exports=i.p+"295d807c15ec4ae6084d.ttf"},4299:(t,e,i)=>{"use strict";t.exports=i.p+"a8a1f3b102509358ac36.ttf"},4528:(t,e,i)=>{"use strict";t.exports=i.p+"e7c1761957d219576d52.ttf"},5042:()=>{}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.m=t,i.amdD=function(){throw new Error("define cannot be used indirect")},i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,i(3607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,