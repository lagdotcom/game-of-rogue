(()=>{var t={5426:(t,e,i)=>{"use strict";i.d(e,{Z:()=>v});var n=i(7537),r=i.n(n),s=i(3645),o=i.n(s),a=i(1667),c=i.n(a),l=new URL(i(4528),i.b),u=new URL(i(5002),i.b),h=new URL(i(4299),i.b),d=new URL(i(2721),i.b),f=o()(r()),m=c()(l),p=c()(u),g=c()(h),y=c()(d);f.push([t.id,"@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 100;\r\n    src: url("+m+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 300;\r\n    src: url("+p+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 400;\r\n    src: url("+g+") format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 500;\r\n    src: url("+y+") format('truetype');\r\n}\r\n\r\nhtml,\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: normal;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n\r\ncanvas {\r\n    font-weight: 300;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAA+D;AACnE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAgE;AACpE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAkE;AACtE;AACA;IACI,0BAA0B;IAC1B,gBAAgB;IAChB,+DAAiE;AACrE;;AAEA;;IAEI,UAAU;IACV,SAAS;IACT,mBAAmB;IACnB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,qCAAqC;AACzC",sourcesContent:["@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 100;\r\n    src: url('./robotomono/RobotoMono-Thin.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 300;\r\n    src: url('./robotomono/RobotoMono-Light.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 400;\r\n    src: url('./robotomono/RobotoMono-Regular.ttf') format('truetype');\r\n}\r\n@font-face {\r\n    font-family: 'Roboto Mono';\r\n    font-weight: 500;\r\n    src: url('./robotomono/RobotoMono-Medium.ttf') format('truetype');\r\n}\r\n\r\nhtml,\r\nbody {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: normal;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n\r\ncanvas {\r\n    font-weight: 300;\r\n    font-family: 'Roboto Mono', monospace;\r\n}\r\n"],sourceRoot:""}]);const v=f},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);n&&o[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),i&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=i):u[2]=i),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(r," */"),o=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([s]).join("\n")}return[e].join("\n")}},4319:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d+++++++d\r\ndE.....Ed\r\ndddd.dddd\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\n#.......#\r\nd##+++##d"},8158:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d#####d\r\n#.....+\r\n#.d###d\r\n#.#    \r\n#.#    \r\n#.#    \r\nd+d    "},1083:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d#####+#####d\r\n#...........#\r\n#...........#\r\n#..#.....#..#\r\n+...........+\r\n#..#.....#..#\r\n+...........+\r\n#..#.....#..#\r\n#...........#\r\n#...........#\r\nd#####+#####d"},5490:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="ddddd\r\nd$$$d\r\nd#+#d\r\ndEEEd\r\nd.E.d\r\ndd+dd"},5705:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="ddddd\r\n#...#\r\n+...+\r\n#...#\r\n+...+\r\n#...#\r\nddddd"},8141:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d+d\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\n#.#\r\nd+d"},7871:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d###d\r\n#.$.#\r\n#.E.#\r\n#...#\r\n#...#\r\n#...#\r\n#...#\r\nd#+#d"},496:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d####d####d\r\n+.........+\r\nd###d.d###d\r\n    #.#    \r\n    #.#    \r\n    #.#    \r\n    d+d    "},267:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d#+#d\r\n#...#\r\n+.d.+\r\n#...#\r\nd#+#d"},9809:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n="d###+###d\r\n#.......#\r\n#.......#\r\n#.......#\r\n+.......+\r\n#.......#\r\n#.......#\r\n#.......#\r\nd###+###d"},6377:(t,e,i)=>{var n=i(4832),r=i(8652),s=i(801),o=i(2030),a=i(3618),c=i(9049),l=i(1971);l.alea=n,l.xor128=r,l.xorwow=s,l.xorshift7=o,l.xor4096=a,l.tychei=c,t.exports=l},4832:function(t,e,i){var n;!function(t,r,s){function o(t){var e,i=this,n=(e=4022871197,function(t){t=String(t);for(var i=0;i<t.length;i++){var n=.02519603282416938*(e+=t.charCodeAt(i));n-=e=n>>>0,e=(n*=e)>>>0,e+=4294967296*(n-=e)}return 2.3283064365386963e-10*(e>>>0)});i.next=function(){var t=2091639*i.s0+2.3283064365386963e-10*i.c;return i.s0=i.s1,i.s1=i.s2,i.s2=t-(i.c=0|t)},i.c=1,i.s0=n(" "),i.s1=n(" "),i.s2=n(" "),i.s0-=n(t),i.s0<0&&(i.s0+=1),i.s1-=n(t),i.s1<0&&(i.s1+=1),i.s2-=n(t),i.s2<0&&(i.s2+=1),n=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function c(t,e){var i=new o(t),n=e&&e.state,r=i.next;return r.int32=function(){return 4294967296*i.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,n&&("object"==typeof n&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.alea=c}(0,t=i.nmd(t),i.amdD)},9049:function(t,e,i){var n;!function(t,r,s){function o(t){var e=this,i="";e.next=function(){var t=e.b,i=e.c,n=e.d,r=e.a;return t=t<<25^t>>>7^i,i=i-n|0,n=n<<24^n>>>8^r,r=r-t|0,e.b=t=t<<20^t>>>12^i,e.c=i=i-n|0,e.d=n<<16^i>>>16^r,e.a=r-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):i+=t;for(var n=0;n<i.length+20;n++)e.b^=0|i.charCodeAt(n),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function c(t,e){var i=new o(t),n=e&&e.state,r=function(){return(i.next()>>>0)/4294967296};return r.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=i.next,r.quick=r,n&&("object"==typeof n&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.tychei=c}(0,t=i.nmd(t),i.amdD)},8652:function(t,e,i){var n;!function(t,r,s){function o(t){var e=this,i="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:i+=t;for(var n=0;n<i.length+64;n++)e.x^=0|i.charCodeAt(n),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function c(t,e){var i=new o(t),n=e&&e.state,r=function(){return(i.next()>>>0)/4294967296};return r.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=i.next,r.quick=r,n&&("object"==typeof n&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.xor128=c}(0,t=i.nmd(t),i.amdD)},3618:function(t,e,i){var n;!function(t,r,s){function o(t){var e=this;e.next=function(){var t,i,n=e.w,r=e.X,s=e.i;return e.w=n=n+1640531527|0,i=r[s+34&127],t=r[s=s+1&127],i^=i<<13,t^=t<<17,i^=i>>>15,t^=t>>>12,i=r[s]=i^t,e.i=s,i+(n^n>>>16)|0},function(t,e){var i,n,r,s,o,a=[],c=128;for(e===(0|e)?(n=e,e=null):(e+="\0",n=0,c=Math.max(c,e.length)),r=0,s=-32;s<c;++s)e&&(n^=e.charCodeAt((s+32)%e.length)),0===s&&(o=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,s>=0&&(o=o+1640531527|0,r=0==(i=a[127&s]^=n+o)?r+1:0);for(r>=128&&(a[127&(e&&e.length||0)]=-1),r=127,s=512;s>0;--s)n=a[r+34&127],i=a[r=r+1&127],n^=n<<13,i^=i<<17,n^=n>>>15,i^=i>>>12,a[r]=n^i;t.w=o,t.X=a,t.i=r}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function c(t,e){null==t&&(t=+new Date);var i=new o(t),n=e&&e.state,r=function(){return(i.next()>>>0)/4294967296};return r.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=i.next,r.quick=r,n&&(n.X&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.xor4096=c}(0,t=i.nmd(t),i.amdD)},2030:function(t,e,i){var n;!function(t,r,s){function o(t){var e=this;e.next=function(){var t,i,n=e.x,r=e.i;return t=n[r],i=(t^=t>>>7)^t<<24,i^=(t=n[r+1&7])^t>>>10,i^=(t=n[r+3&7])^t>>>3,i^=(t=n[r+4&7])^t<<7,t=n[r+7&7],i^=(t^=t<<13)^t<<9,n[r]=i,e.i=r+1&7,i},function(t,e){var i,n=[];if(e===(0|e))n[0]=e;else for(e=""+e,i=0;i<e.length;++i)n[7&i]=n[7&i]<<15^e.charCodeAt(i)+n[i+1&7]<<13;for(;n.length<8;)n.push(0);for(i=0;i<8&&0===n[i];++i);for(8==i?n[7]=-1:n[i],t.x=n,t.i=0,i=256;i>0;--i)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function c(t,e){null==t&&(t=+new Date);var i=new o(t),n=e&&e.state,r=function(){return(i.next()>>>0)/4294967296};return r.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=i.next,r.quick=r,n&&(n.x&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.xorshift7=c}(0,t=i.nmd(t),i.amdD)},801:function(t,e,i){var n;!function(t,r,s){function o(t){var e=this,i="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:i+=t;for(var n=0;n<i.length+64;n++)e.x^=0|i.charCodeAt(n),n==i.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function c(t,e){var i=new o(t),n=e&&e.state,r=function(){return(i.next()>>>0)/4294967296};return r.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=i.next,r.quick=r,n&&("object"==typeof n&&a(n,i),r.state=function(){return a(i,{})}),r}r&&r.exports?r.exports=c:i.amdD&&i.amdO?void 0===(n=function(){return c}.call(e,i,e,r))||(r.exports=n):this.xorwow=c}(0,t=i.nmd(t),i.amdD)},1971:function(t,e,i){var n;!function(r,s,o){var a,c=256,l=o.pow(c,6),u=o.pow(2,52),h=2*u,d=255;function f(t,e,i){var n=[],d=y(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,v(s)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(c):(t=new Uint8Array(c),(r.crypto||r.msCrypto).getRandomValues(t)),v(t)}catch(t){var e=r.navigator,i=e&&e.plugins;return[+new Date,r,i,r.screen,v(s)]}}():t,3),n),f=new m(n),S=function(){for(var t=f.g(6),e=l,i=0;t<u;)t=(t+i)*c,e*=c,i=f.g(1);for(;t>=h;)t/=2,e/=2,i>>>=1;return(t+i)/e};return S.int32=function(){return 0|f.g(4)},S.quick=function(){return f.g(4)/4294967296},S.double=S,y(v(f.S),s),(e.pass||i||function(t,e,i,n){return n&&(n.S&&p(n,f),t.state=function(){return p(f,{})}),i?(o.random=t,e):t})(S,d,"global"in e?e.global:this==o,e.state)}function m(t){var e,i=t.length,n=this,r=0,s=n.i=n.j=0,o=n.S=[];for(i||(t=[i++]);r<c;)o[r]=r++;for(r=0;r<c;r++)o[r]=o[s=d&s+t[r%i]+(e=o[r])],o[s]=e;(n.g=function(t){for(var e,i=0,r=n.i,s=n.j,o=n.S;t--;)e=o[r=d&r+1],i=i*c+o[d&(o[r]=o[s=d&s+e])+(o[s]=e)];return n.i=r,n.j=s,i})(c)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var i,n=[],r=typeof t;if(e&&"object"==r)for(i in t)try{n.push(g(t[i],e-1))}catch(t){}return n.length?n:"string"==r?t:t+"\0"}function y(t,e){for(var i,n=t+"",r=0;r<n.length;)e[d&r]=d&(i^=19*e[d&r])+n.charCodeAt(r++);return v(e)}function v(t){return String.fromCharCode.apply(0,t)}if(y(o.random(),s),t.exports){t.exports=f;try{a=i(5042)}catch(t){}}else void 0===(n=function(){return f}.call(e,i,e,t))||(t.exports=n)}("undefined"!=typeof self?self:this,[],Math)},7654:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>y});var n=i(3379),r=i.n(n),s=i(7795),o=i.n(s),a=i(569),c=i.n(a),l=i(3565),u=i.n(l),h=i(9216),d=i.n(h),f=i(4589),m=i.n(f),p=i(5426),g={};g.styleTagTransform=m(),g.setAttributes=u(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),r()(p.Z,g);const y=p.Z&&p.Z.locals?p.Z.locals:void 0},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var s={},o=[],a=0;a<t.length;a++){var c=t[a],l=n.base?c[0]+n.base:c[0],u=s[l]||0,h="".concat(l," ").concat(u);s[l]=u+1;var d=i(h),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var m=r(f,n);n.byIndex=a,e.splice(a,0,{identifier:h,updater:m,references:1})}o.push(h)}return o}function r(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var s=n(t=t||[],r=r||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=i(s[o]);e[a].references--}for(var c=n(t,r),l=0;l<s.length;l++){var u=i(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=c}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var s=i.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},2203:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.aiAngry=e.aiInvestigating=e.aiPassive=e.normalAI=void 0;const n=i(9028),r=i(9607),s=i(4945),o=i(7594),a=i(9699);function c(t){return!!m(t)||!!p(t)||!!function(t){if(!t.aiTraits.investigatesNoises)return!1;const e=t.g.noise.closest(t);return!!e&&d(t,e.pos)}(t)}function l(t){return!!m(t)||!!p(t)||!!function(t){const e=t.targetPos;return e?0===(0,o.distance)(t.pos,e)&&f(t):f(t)}(t)||!!g(t,t.targetPos)||f(t)}function u(t){return!!function(t){const e=t.target;return e?(e.dead||e.side===t.side)&&f(t):f(t)}(t)||!!function(t){const e=t.target;return e?!(0,r.canSee)(t,e.pos)&&d(t,e.pos):f(t)}(t)||!!function(t){const e=t.target;if(!e)return f(t);const i=Math.abs(t.pos.x-e.pos.x),r=Math.abs(t.pos.y-e.pos.y);if(i>1||r>1)return!1;const s=(0,o.getDirectionBetween)(t.pos,e.pos);return s!==t.facing?t.turn(s,!0):(0,n.attack)(t,e)}(t)||g(t,t.target.pos)}function h(t,e){const i=t.g;return t.target=e,t.aiState=a.AIState.Angry,t.aiTraits.yellsOnSight&&((0,r.canSee)(i.player,t.pos)?i.log.info("%an yells a challenge at %bn!",t,e):(0,o.distance)(i.player.pos,t.pos)<i.player.hearingRange&&i.log.info("You hear someone shout a challenge!"),i.noise.add(t.pos,t.aiTraits.yellsOnSight,t,2)),u(t)}function d(t,e){return t.targetPos=e,t.aiState=a.AIState.Investigating,l(t)}function f(t){return t.target=void 0,t.targetPos=void 0,t.aiState=a.AIState.Passive,!0}function m(t){if(t.aiHurtBy){const e=t.aiHurtBy;if(t.aiHurtBy=void 0,(0,r.canSee)(t,e.pos))return h(t,e);const i=(0,o.getDirectionBetween)(t.pos,e.pos);if(i!==t.facing)return t.turn(i,!0)}return!1}function p(t){const e=(0,r.getVisibleEnemies)(t);return!!e.length&&h(t,(0,o.oneOf)(t.g.rng,e))}function g(t,e){const i=(0,s.makePath)(t.g.f,t.pos,e);if(!i)return!1;const n=i[1],r=(0,o.getDirectionBetween)(t.pos,n);return r!==t.facing?t.turn(r,!0):t.move(n,!0)}e.normalAI=function(){switch(this.aiState){case a.AIState.Passive:return c(this);case a.AIState.Investigating:return l(this);case a.AIState.Angry:return u(this);default:return!1}},e.aiPassive=c,e.aiInvestigating=l,e.aiAngry=u},6272:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Actor=void 0;const n=i(9699);e.Actor=class{constructor(t,e,i){this.g=t,this.name=e,this.side=i,this.g=t,this.aiState=n.AIState.Passive,this.aiTraits={},this.armour=0,this.balance=this.balanceMax=100,this.balanceRegen=1,this.dead=!1,this.equipment={},this.hearingRange=10,this.hpRegen=.01,this.inventory=[],this.kiRegen=.1,this.lifetime=1/0,this.name=e,this.nextMove=0,this.moveCost=1,this.sightFov=160,this.sightRange=5,this.skills=[],this.skillsMastered=[],this.substituteTimer=0,this.turnCost=.5}get alive(){return!this.dead}apply(t){this.hp=this.hpMax=t.hp,this.ki=this.kiMax=t.ki,this.str=t.str}move(t,e){if(this.g.f.map.get(t.x,t.y)===n.Tile.Wall)return!1;if(this.g.actors.filter((e=>e.pos===t)).length)return!1;const i=this.pos;return this.pos=t,this.isPlayer&&(this.g.redraw(),this.g.hooks.fire("player.move",{actor:this,from:i})),e&&this.spend(this.moveCost),!0}turn(t,e){if(this.facing===t)return!1;const i=this.facing;return this.facing=t,this.isPlayer&&(this.g.redraw(),this.g.hooks.fire("player.turn",{actor:this,from:i})),e&&this.spend(this.turnCost),!0}spend(t){this.nextMove+=t,this.isPlayer&&this.g.advance(t)}regen(t){this.dead||(this.balance=Math.min(this.balanceMax,this.balance+this.balanceRegen*t),this.ki=Math.min(this.kiMax,this.ki+this.kiRegen*t),this.hp=Math.min(this.hpMax,this.hp+this.hpRegen*t))}get(t){this.g.t.todo("Actor.get",this.name,t.template.name),this.inventory.push(t)}equip(t){if(t.type===n.ItemType.Other)return!1;if(this.g.t.enter("Actor.equip",this.name,t.template.name),t.type===n.ItemType.Weapon){const e=t;if(0===e.template.hands&&e.template.ammo){let t;if(this.slotUsed(n.ItemSlot.BothHands))t=this.equipment[n.ItemSlot.BothHands];else{if(!this.slotUsed(n.ItemSlot.Primary))return this.isPlayer&&this.g.log.info("Equip the weapon first."),this.g.t.message("cannot equip ammo; no weapon equipped"),this.g.t.leave("Actor.equip"),!1;t=this.equipment[n.ItemSlot.Primary]}if(!t.matches(e.template.firedBy))return this.isPlayer&&this.g.log.info(`${t.name()} can't fire ${e.name()}`),this.g.t.message("cannot equip ammo; wrong weapon equipped"),this.g.t.leave("Actor.equip"),!1;const i=this.equipApply(e,n.ItemSlot.Secondary);return this.g.t.leave("Actor.equip"),i}if(2===e.template.hands){if(this.slotUsed(n.ItemSlot.BothHands)&&!this.unEquip(n.ItemSlot.BothHands))return this.g.t.message("cannot remove BothHand"),this.g.t.leave("Actor.equip"),!1;if(this.slotUsed(n.ItemSlot.Secondary)&&!this.unEquip(n.ItemSlot.Secondary))return this.g.t.message("cannot remove Secondary"),this.g.t.leave("Actor.equip"),!1;if(this.slotUsed(n.ItemSlot.Primary)&&!this.unEquip(n.ItemSlot.Primary))return this.g.t.message("cannot remove Primary"),this.g.t.leave("Actor.equip"),!1;const t=this.equipApply(e,n.ItemSlot.BothHands);return this.g.t.leave("Actor.equip"),t}if(this.slotUsed(n.ItemSlot.BothHands)&&!this.unEquip(n.ItemSlot.BothHands))return this.g.t.message("cannot remove BothHands"),this.g.t.leave("Actor.equip"),!1;if(e.template.offhand&&this.slotUsed(n.ItemSlot.Primary)){if(this.slotUsed(n.ItemSlot.Secondary)&&!this.unEquip(n.ItemSlot.Secondary))return this.g.t.message("cannot remove Secondary"),this.g.t.leave("Actor.equip"),!1;const t=this.equipApply(e,n.ItemSlot.Secondary);return this.g.t.leave("Actor.equip"),t}if(!this.unEquip(n.ItemSlot.Primary))return this.g.t.message("cannot remove Primary"),this.g.t.leave("Actor.equip"),!1;const i=this.equipApply(e,n.ItemSlot.Primary);return this.g.t.leave("Actor.equip"),i}if(!this.unEquip(t.template.slot))return this.g.t.message("cannot remove",t.template.slot),this.g.t.leave("Actor.equip"),!1;const e=this.equipApply(t,t.template.slot);return this.g.t.leave("Actor.equip"),e}equipApply(t,e){this.equipment[e]=t,this.inventory=this.inventory.filter((e=>e!==t)),Object.entries(t.mods).forEach((t=>{this[t[0]]+=t[1]}))}unEquip(t){return!this.equipment[t]||(this.g.t.message("Actor.unEquip",this.name,t),this.unEquipApply(t))}unEquipApply(t){const e=this.equipment[t];return this.inventory.push(e),delete this.equipment[t],Object.entries(e.mods).forEach((t=>{this[t[0]]-=t[1]})),!0}slotUsed(t){return!!this.equipment[t]}ai(){return!1}getPrimaryWeapon(){return this.slotUsed(n.ItemSlot.BothHands)?this.equipment[n.ItemSlot.BothHands]:this.slotUsed(n.ItemSlot.Primary)?this.equipment[n.ItemSlot.Primary]:this.natural}getSecondaryWeapon(){return this.slotUsed(n.ItemSlot.Secondary)?this.equipment[n.ItemSlot.Secondary]:this.natural2}}},1207:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.describeTile=e.randomEnemy=void 0;const n=i(5601),r=i(6724),s=i(8925),o=i(142),a=i(9349),c=i(6248),l=i(7594),u=i(9699),h=Object.values(n.dirOffsets);e.default=class{constructor(t){this.g=t}generate(t,e,i,r,s=!1){s||(this.g.t.enter("Architect.generate",e,i,r,this.g.rng.getSeed()),this.g.hooks.fire("architect.begin",{}));const a=new o.Floor(`Floor${t}`,t,e,i),c=this.randomRoom(),u=(0,l.int)((e-c.width)/2),h=(0,l.int)((i-c.height)/2);this.g.t.message(`pasted ${c.name} @${u},${h}`),a.map.paste(u,h,c," ");let d=0,f=1;const m=new Set;for(;f<r;){const t=this.randomRoom(),e=this.pickPastePoint(a.map,t,"#","d");if(e&&this.fits(a.map,t,e)&&!m.has(e))this.g.t.message(`pasted ${t.name} @${e.x},${e.y}`),a.map.paste(e.x,e.y,t," "),f++,m.add(e);else if(d++,d>n.ARCHITECT_ATTEMPTS){this.g.t.message("exceeded attempts threshold");break}}return f<n.ARCHITECT_MIN_ROOMS?(this.g.t.message("didn't generate enough rooms, retrying"),this.generate(t,e,i,r,!0)):(this.cleanup(a.map),this.addEnemies(a),this.addTreasure(a),this.placePlayer(a),this.g.hooks.fire("architect.end",{floor:a}),this.g.t.leave("Architect.generate"),a)}randomRoom(){return(0,l.oneOf)(this.g.rng,c.rooms).rotate((0,l.rnd)(this.g.rng,4))}pickPastePoint(t,e,...i){const n=(0,l.oneOf)(this.g.rng,t.find(...i));return n?{x:(0,l.rnd)(this.g.rng,2)?n.x:n.x-e.width+1,y:(0,l.rnd)(this.g.rng,2)?n.y:n.y-e.height+1}:null}fits(t,e,i){if(i.x<0)return!1;if(i.y<0)return!1;if(i.x+e.width>=t.width)return!1;if(i.y+e.height>=t.height)return!1;let n=!1;for(let r=i.x;r<i.x+e.width;r++)for(let s=i.y;s<i.y+e.height;s++){const o=t.get(r,s),a=e.get(r-i.x,s-i.y);if(a!==u.Tile.Empty&&o!==u.Tile.Empty){if(o!==u.Tile.Wall&&o!==u.Tile.NotDoor&&o!==u.Tile.Empty&&o!==a)return!1;if(o===u.Tile.NotDoor&&a===u.Tile.Door)return!1;o!==u.Tile.Wall&&o!==u.Tile.Door||a!==u.Tile.Door||(n=!0)}}return n}cleanup(t){this.g.t.enter("Architect.cleanup");let e=!0;for(;e;){e=!1;for(let i=0;i<t.height;i++)for(let n=0;n<t.width;n++){const r=t.get(n,i);if(r===u.Tile.NotDoor){t.set(n,i,u.Tile.Wall);continue}if(r!==u.Tile.Door)continue;const s=t.get(n,i-1),o=t.get(n-1,i),a=t.get(n+1,i),c=t.get(n,i+1);if(0===n||n===t.width-1||0===i||i===t.height-1){t.set(n,i,u.Tile.Wall);continue}if(o===u.Tile.Space&&a===u.Tile.Wall){this.g.t.message("carve right",n,i),e=!0,t.set(n+1,i,u.Tile.Space);continue}if(a===u.Tile.Space&&o===u.Tile.Wall){this.g.t.message("carve left",n,i),e=!0,t.set(n-1,i,u.Tile.Space);continue}if(s===u.Tile.Space&&c===u.Tile.Wall){this.g.t.message("carve down",n,i),e=!0,t.set(n,i+1,u.Tile.Space);continue}if(c===u.Tile.Space&&s===u.Tile.Wall){this.g.t.message("carve up",n,i),e=!0,t.set(n,i-1,u.Tile.Space);continue}if(o===u.Tile.Wall&&a!==u.Tile.Wall||a===u.Tile.Wall&&o!==u.Tile.Wall||s===u.Tile.Wall&&c!==u.Tile.Wall||c===u.Tile.Wall&&s!==u.Tile.Wall){e=!0,t.set(n,i,u.Tile.Space);continue}let l=0;o===u.Tile.Space&&l++,a===u.Tile.Space&&l++,s===u.Tile.Space&&l++,c===u.Tile.Space&&l++,l>2?(this.g.t.message("too many spaces",n,i),e=!0,t.set(n,i,u.Tile.Space)):o===u.Tile.Space&&a===u.Tile.Door||a===u.Tile.Space&&o===u.Tile.Door||s===u.Tile.Space&&c===u.Tile.Door||c===u.Tile.Space&&s===u.Tile.Door?(this.g.t.message("too many doors",n,i),e=!0,t.set(n,i,u.Tile.Space)):(o===u.Tile.Empty&&a===u.Tile.Space||a===u.Tile.Empty&&o===u.Tile.Space||s===u.Tile.Empty&&c===u.Tile.Space||c===u.Tile.Empty&&s===u.Tile.Space)&&(this.g.t.message("door to nowhere",n,i),e=!0,t.set(n,i,u.Tile.Wall))}}t.find(u.Tile.Space,u.Tile.Door).forEach((e=>{(0,l.any)(h,(i=>t.get(e.x+i.x,e.y+i.y)===u.Tile.Empty))&&(this.g.t.message("leak plugged",t.get(e.x,e.y),e),t.set(e.x,e.y,u.Tile.Wall))})),this.g.t.leave("Architect.cleanup")}addEnemies(t){for(this.g.t.enter("Architect.addEnemies"),t.map.find(u.Tile.Enemy).forEach((e=>{const i=f(this.g);t.map.set(e.x,e.y,u.Tile.Space),i.pos=e,t.enemies.push(i)}));t.enemies.length<n.ARCHITECT_MIN_ENEMIES;){const e=f(this.g),i=(0,l.oneOf)(this.g.rng,t.map.find(u.Tile.Space));t.enemyAt(i)||(e.pos=i,t.enemies.push(e))}this.g.t.leave("Architect.addEnemies")}addTreasure(t){this.g.t.enter("Architect.addTreasure"),t.map.find(u.Tile.Treasure).forEach((e=>{const i=(0,a.randomItem)(this.g);t.map.set(e.x,e.y,u.Tile.Space),i.pos=e,t.items.push(i)})),this.g.t.leave("Architect.addTreasure")}placePlayer(t){for(this.g.t.enter("Architect.placePlayer");;){const e=(0,l.oneOf)(this.g.rng,t.map.find(u.Tile.Space));if(!t.enemyAt(e)&&!t.itemAt(e)){t.player=e;break}}this.g.t.leave("Architect.placePlayer")}};const d=[r.EnemyNinja,s.EnemySamurai];function f(t){const e=(0,l.oneOf)(t.rng,d);t.t.enter("randomEnemy",e.name);const i=new e(t);return t.t.leave("randomEnemy"),i}e.randomEnemy=f,e.describeTile=function(t){switch(t){case u.Tile.NotDoor:case u.Tile.Wall:return"a wall";case u.Tile.Empty:case u.Tile.Space:return"an empty space";case u.Tile.Door:return"a door";case u.Tile.Enemy:return"an enemy";case u.Tile.Treasure:return"a piece of treasure";case u.Tile.Player:return"a challenger";default:return"dunno"}}},2061:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Display=e.DisplayCell=void 0;class i{constructor(t,e,i,n,r){this.parent=t,this.x=e,this.y=i,this.w=n,this.h=r,this.fg("white"),this.bg("black"),this.text(" "),this.border("transparent"),this.tx=e+n/2,this.ty=i+r/2}set(t){this.fg(t.fg),this.bg(t.bg),this.text(t.char)}fg(t){return void 0!==t&&this.f!==t&&(this.dirty=!0,this.f=t),this.f}bg(t){return void 0!==t&&this.b!==t&&(this.dirty=!0,this.b=t),this.b}border(t){return void 0!==t&&this.bo!==t&&(this.dirty=!0,this.bo=t),this.bo}text(t){return void 0!==t&&(this.dirty=!0,this.value=t),this.value}draw(t){this.dirty&&(this.dirty=!1,t.fillStyle=this.b,t.fillRect(this.x,this.y,this.w,this.h),t.strokeStyle=this.f,t.strokeText(this.value,this.tx,this.ty),"transparent"!==this.bo&&(t.strokeStyle=this.bo,t.strokeRect(this.x,this.y,this.w,this.h)))}}e.DisplayCell=i,e.Display=class{constructor(t,e,n,r,s,o){this.parent=t,this.width=e,this.height=n,this.tileWidth=r,this.tileHeight=s,this.font=o,this.defaultBackground="black",this.defaultForeground="white",this.canvas=document.createElement("canvas"),this.canvas.width=e*r,this.canvas.height=n*s,this.cells=[];for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)this.cells.push(new i(this,e*this.tileWidth,t*this.tileHeight,this.tileWidth,this.tileHeight));t.append(this.canvas);const a=this.canvas.getContext("2d");if(!a)throw new Error("Could not get rendering context");a.font=o,a.textAlign="center",a.textBaseline="middle",this.ctx=a}update(){this.cells.forEach((t=>t.draw(this.ctx)))}fill(t){const e={fg:this.defaultForeground,bg:this.defaultBackground,char:t};this.cells.forEach((t=>t.set(e)))}clear(){this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}clearBorders(){this.cells.forEach((t=>t.border("transparent")))}at(t,e){return this.cells[e*this.width+t]}str(t,e,i,n,r){const s={fg:n||this.defaultForeground,bg:r||this.defaultBackground,char:""};for(let n=0;n<i.length;n++)s.char=i[n],this.at(t+n,e).set(s)}}},9986:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(6272),r=i(2203),s=i(9699);class o extends n.Actor{constructor(t){super(t,"Enemy",s.Side.Enemy),this.ai=r.normalAI.bind(this),this.isEnemy=!0,this.bg="#200000",this.char="E",this.facing=s.Dir.N,this.fg="red"}}e.default=o},142:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Floor=void 0;const n=i(1512),r=i(9699);e.Floor=class{constructor(t,e,i,s){this.name=t,this.floor=e,this.width=i,this.height=s,this.map=new n.Grid(t,i,s,r.Tile.Empty),this.enemies=[],this.items=[],this.player=null}enemyAt(t){const e=this.enemies.filter((e=>e.pos===t));return e.length?e[0]:null}itemAt(t){const e=this.items.filter((e=>e.pos===t));return e.length?e[0]:null}}},9221:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(1207)),s=i(395),o=i(9028),a=i(2061),c=n(i(7005)),l=n(i(670)),u=i(9607),h=n(i(1205)),d=n(i(1515)),f=n(i(4778)),m=n(i(2045)),p=n(i(5619)),g=i(394),y=i(7989),v=i(7594),S=n(i(1345)),w=i(9699),b={[w.Tile.Door]:{fg:"brown",bg:"black"},[w.Tile.Space]:{fg:"#404040",bg:"black"},[w.Tile.Wall]:{fg:"#808080",bg:"black"}};e.default=class{constructor(t,e){this.parent=t,this.font=e,this.t=new S.default,this.t.enter("Game.new"),this.seed(),this.draw=this.draw.bind(this),this.display=new a.Display(t,100,40,12,16,e),this.display.str(0,0,"setting up..."),document.fonts.load(e).then((()=>{this.redraw()})),this.actors=[],this.architect=new r.default(this),this.hooks=new c.default(this),this.input=new l.default(this),this.log=new h.default(this),this.noise=new d.default(this),this.player=new f.default(this,(0,v.oneOf)(this.rng,[s.Samurai,s.Ninja,s.Monk])),this.playerUI=new m.default(this),this.prompt=new p.default(this),this.timer=0,this.ui=[this.playerUI,this.log,this.prompt],this.hooks.on("sys.advance",(({time:t})=>{this.timer+=t,this.actors.forEach((e=>e.regen(t)))})),(0,s.initClasses)(this),this.t.leave("Game.new")}seed(t){this.rng=new g.tychei(t),this.t.message("rng seed",this.rng.getSeed())}enter(t){this.t.enter("enter",t),this.f=t,this.player.pos=t.player,this.actors=[this.player,...this.f.enemies],1===t.floor&&this.log.coloured("purple",`Welcome to the Game of Rogue, young ${this.player.class.name}.`),this.seen=new Set,this.redraw(),this.input.listening=!0,this.t.leave("enter")}add(t){this.actors.push(t),this.f.enemies.push(t)}remove(t){const e=e=>e!==t;this.actors=this.actors.filter(e),this.f.enemies=this.f.enemies.filter(e)}advance(t){for(this.input.listening=!1,this.hooks.fire("sys.advance",{time:t});!this.input.listening&&!this.player.dead;){this.actors.sort(((t,e)=>t.nextMove-e.nextMove));const t=this.actors[0];if(t.isPlayer)return void(this.input.listening=!0);const e=t.nextMove;t.ai(),t.nextMove===e&&(t.nextMove=this.player.nextMove+.5)}}redraw(){this.drawTimeout||(this.drawTimeout=requestAnimationFrame(this.draw))}draw(){this.drawTimeout=0,this.display.clear(),this.view=(0,u.getSightCone)(this.player),this.view.forEach((t=>this.seen.add(t))),this.seen.forEach((t=>{this.view.has(t)?this.drawTile(t):this.drawSeenTile(t)})),this.ui.forEach((t=>t.draw())),this.display.update(),this.display.clearBorders()}drawTile(t){const e=this.display.at(t.x,t.y),i=this.f.enemyAt(t),n=this.f.itemAt(t);let r;if(this.player.pos===t)r=this.player;else if(i)r=i,i.aiState===w.AIState.Angry?i.target===this.player?e.border("red"):e.border("orange"):i.aiState===w.AIState.Investigating&&e.border("yellow");else if(n)r=n.token;else{const e=this.f.map.get(t.x,t.y);if(!b[e])return;r=Object.assign(Object.assign({},b[e]),{char:e})}e.set(r)}drawSeenTile(t){const e=this.f.itemAt(t),i={char:"?",fg:"#222",bg:"black"};this.player.pos===t?i.char=this.player.char:e?(i.char=e.token.char,i.fg="#444"):i.char=this.f.map.get(t.x,t.y),this.display.at(t.x,t.y).set(i)}blockers(t){return this.actors.filter((e=>e.pos===t))}playerAct(t){if(this.player.facing!==t)return this.player.turn(t,!0);const e=this.f.map.addFacing(this.player.pos,t),i=this.blockers(e);if(i.length){const t=i[0];return t.cloneOf===this.player?((0,y.swapPositionWithClone)(this.player,t),!0):(0,o.attack)(this.player,t)}return this.player.move(e,!0)}playerMove(t){return this.playerAct(t)}playerSkill(t){return this.player.skills.includes(t.name)?this.player.ki<t.ki?this.log.error("Your ki is too low."):this.player.balance<t.balance?this.log.error("Your balance is off."):void t.fn(this.player):this.log.error("You don't know that skill.")}trace(t,e,i,n,r,s){const o={start:this.f.map.ref(t,e),projected:this.f.map.ref(i,n),visited:new Set,end:null};let a=t,c=e;const l=(i-t)/r,u=(n-e)/r;for(let t=0;t<=r;t++){const t=this.f.map.ref(a,c);if(!o.visited.has(t)&&(o.visited.add(t),!s(t)))return o.end=t,o;a+=l,c+=u}return o}debugNewFloor(){this.player=new f.default(this,(0,v.oneOf)(this.rng,[s.Samurai,s.Ninja,s.Monk])),this.enter(this.architect.generate(1,this.display.width-this.playerUI.width,this.display.height,200))}debugShowAll(){for(let t=0;t<this.f.map.height;t++)for(let e=0;e<this.f.map.width;e++)this.drawTile(this.f.map.ref(e,t));this.display.update()}}},1512:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grid=void 0;const n=i(5601),r=i(7594);class s{constructor(t,e,i,n){this.name=t,this.width=e,this.height=i,this.init=n,this.contents=[],this.oob={x:-1,y:-1,g:this,s:Symbol(`${t}@oob`)},this.refs=[];for(let r=0;r<i;r++){const i=[],s=[];for(let o=0;o<e;o++)i.push(n),s.push({x:o,y:r,g:this,s:Symbol(`${t}@${o},${r}`)});this.contents.push(i),this.refs.push(s)}}contains(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height}ref(t,e){const i=(0,r.int)(t),n=(0,r.int)(e);return this.contains(i,n)?this.refs[n][i]:this.oob}addFacing(t,e){const i=n.dirOffsets[e];return this.ref(t.x+i.x,t.y+i.y)}get(t,e){const i=(0,r.int)(t),n=(0,r.int)(e);return this.contains(i,n)?this.contents[n][i]:this.init}set(t,e,i){const n=(0,r.int)(t),s=(0,r.int)(e);this.contents[s][n]=i}paste(t,e,i,n){for(let r=0;r<i.height;r++)if(!(e+r>=this.height))for(let s=0;s<i.width;s++)t+s>=this.width||i.get(s,r)!==n&&this.set(t+s,e+r,i.get(s,r))}find(...t){const e=[];for(let i=0;i<this.height;i++)for(let n=0;n<this.width;n++)t.includes(this.get(n,i))&&e.push(this.refs[i][n]);return e}square(t,e){const i=Math.max(0,t.x-e),n=Math.max(0,t.y-e),r=Math.min(this.width-1,t.x+e),s=Math.min(this.height-1,t.y+e),o=[];for(let t=n;t<=s;t++)for(let e=i;e<=r;e++)o.push(this.ref(e,t));return o}rotate(t){const{width:e,height:i,init:n}=this;let r;if(!t)return this;const o=`${this.name}/${t}`;r=2===t?new s(o,e,i,n):new s(o,i,e,n);for(let n=0;n<i;n++)for(let s=0;s<e;s++){let o,a;switch(t){case 1:o=i-1-n,a=s;break;case 2:o=e-1-s,a=i-1-n;break;case 3:o=n,a=e-1-s}r.set(o,a,this.get(s,n))}return r}replace(t,e){for(let i=0;i<this.height;i++)for(let n=0;n<this.width;n++)this.get(n,i)===t&&this.set(n,i,e)}toString(){return this.contents.map((t=>t.join(""))).join("\n")}}e.Grid=s},7005:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.g=t,this.listeners={}}on(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)}off(t,e){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter((t=>t!==e)))}fire(t,e){this.g.t.enter("Hooks.fire",t,e),this.listeners[t]&&this.listeners[t].forEach((t=>t(e))),this.g.t.leave("Hooks.fire")}}},670:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(9699);e.default=class{constructor(t){this.g=t,this.listening=!1,document.addEventListener("keydown",this.keydown.bind(this))}getDirection(t,e){this.g.t.todo("getDirection",t),this.g.prompt.show(t);const i=t=>(e(t),this.g.prompt.clear(),!0);this.handler=(t,e,r)=>{switch(t){case"ArrowUp":return i(n.Dir.N);case"PageUp":return i(n.Dir.NE);case"ArrowRight":return i(n.Dir.E);case"PageDown":return i(n.Dir.SE);case"ArrowDown":return i(n.Dir.S);case"End":return i(n.Dir.SW);case"ArrowLeft":return i(n.Dir.W);case"Home":return i(n.Dir.NW)}return this.g.prompt.clear(),!0}}keydown(t){if(this.listening){if(!this.handler)return this.playerInput(t.key,t.shiftKey,t.metaKey);this.handler(t.key,t.shiftKey,t.metaKey)&&(this.handler=null)}}playerInput(t,e,i){switch(t){case"ArrowUp":return this.g.playerMove(n.Dir.N);case"PageUp":return this.g.playerMove(n.Dir.NE);case"ArrowRight":return this.g.playerMove(n.Dir.E);case"PageDown":return this.g.playerMove(n.Dir.SE);case"ArrowDown":return this.g.playerMove(n.Dir.S);case"End":return this.g.playerMove(n.Dir.SW);case"ArrowLeft":return this.g.playerMove(n.Dir.W);case"Home":return this.g.playerMove(n.Dir.NW);case"1":return this.usePlayerSkill(0);case"2":return this.usePlayerSkill(1);case"r":return this.g.debugNewFloor();case"s":return this.g.debugShowAll()}}usePlayerSkill(t){const e=this.g.player.class.skills[t];e&&e.fn&&this.g.playerSkill(e)}}},9349:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomItem=e.constructItem=e.instantiateItem=e.Weapon=e.OtherItem=e.Armour=void 0;const n=i(5601),r=i(2677),s=i(3423),o=i(9587),a=i(7594),c=i(9699);class l{constructor(t,e){this.g=t,this.token={bg:"#202000",char:"$",fg:"yellow"},this.type=c.ItemType.Other,e&&(this.mods=Object.assign({},e.mods),this.template=e,this.token.char=p[e.type],this.type=e.type,e.getStackAmount&&(this.count=e.getStackAmount(t)))}matches(t){let e=!0;return Object.values(t).forEach((t=>{this.template.traits[t[0]]!==t[1]&&(e=!1)})),e}name(t={}){return this.template.stacked&&!t.singular?`${this.count} ${this.template.name}`:t.article?`${this.template.article} ${this.template.name}`:this.template.name}}e.default=l;class u extends l{}e.Armour=u;class h extends l{}e.OtherItem=h;class d extends l{constructor(t,e){super(t,e),e.ammo&&(this.token.char="/")}}e.Weapon=d;const f=[s.kusanagi],m=[o.katana,o.sai,o.shuriken,o.tanto,o.tekko,o.wakizashi,o.ya,o.yumi,r.doMaru,r.hachimaki,r.sujiBachi],p={[c.ItemType.Armour]:"[",[c.ItemType.Weapon]:")",[c.ItemType.Other]:"$"};function g(t,e){t.t.todo("randomEnchant",e.template.name)}function y(t,e){switch(e.type){case c.ItemType.Armour:return new u(t,e);case c.ItemType.Weapon:return new d(t,e);default:return new h(t,e)}}function v(t,e){t.t.enter("constructItem",e.name);const i=y(t,e);return!e.traits.legendary&&(0,a.rnd)(t.rng,100)<n.MAGIC_CHANCE&&(g(t,i),(0,a.rnd)(t.rng,100)<n.MAGIC_CHANCE&&g(t,i)),t.t.leave("constructItem"),i}e.instantiateItem=y,e.constructItem=v,e.randomItem=function(t){const e=function(t){for(;;){if((0,a.rnd)(t.rng,100)<n.ARTIFACT_CHANCE)return(0,a.oneOf)(t.rng,f);const e=(0,a.oneOf)(t.rng,m);if((0,a.rnd)(t.rng,100)>=e.rarity)return e}}(t);return v(t,e)}},1205:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=i(6272),s=i(2929),o=n(i(9349)),a=i(7594),c={a:0,b:1,c:2,d:3,e:4,f:5},l={n:t=>t.isPlayer?"you":t.cloneOf===t.g.player?"your clone":t.name,o:t=>t.isPlayer?"your":t.cloneOf===t.g.player?"your clone's":t.name+"'s",r:t=>t.isPlayer?"your":"their",s:t=>t.isPlayer?"":"s","#":t=>t.name};e.default=class{constructor(t,e=5,i=1){this.g=t,this.height=e,this.x=i,this.logs=[],this.y=t.display.height-1}draw(){let t=this.y;this.logs.forEach((({message:e,fg:i,bg:n})=>{this.g.display.str(this.x,t,e,i,n),t--}))}add(t){for(this.logs.unshift(t);this.logs.length>this.height;)this.logs.pop();this.g.redraw()}message(t,e,i){this.add({message:t,fg:e,bg:i})}coloured(t,e,...i){const n=this.format(e,...i);return this.message(n,t)}error(t,...e){return this.coloured(s.colourError,t,...e)}info(t,...e){return this.coloured(s.colourInfo,t,...e)}format(t,...e){return(0,a.capFirst)(t.replace(/%../g,(t=>{const i=t[2],n=e[c[t[1]]];switch((s=n)instanceof r.Actor?"actor":s instanceof o.default?"item":"string"==typeof s?"string":"number"){case"actor":return l[i](n);case"item":return n.name({singular:!0});case"string":return n;case"number":return n.toString()}var s})))}}},1515:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(7594);e.default=class{constructor(t){this.g=t,this.noises=[],t.hooks.on("sys.advance",(()=>this.tick())),t.hooks.on("architect.begin",(()=>this.clear()))}clear(){this.noises=[]}add(t,e,i,n){this.noises.push({pos:t,volume:e,source:i,ttl:this.g.timer+n})}tick(){this.noises=this.noises.filter((t=>t.ttl>this.g.timer))}closest(t){let e,i=t.hearingRange+1;return this.noises.forEach((r=>{const s=(0,n.distance)(t.pos,r.pos)-r.volume;s<i&&(i=s,e=r)})),e}}},4778:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(6272),r=i(9587),s=i(9349),o=i(9699);class a extends n.Actor{constructor(t,e){super(t,"Player",o.Side.Player),this.isPlayer=!0,this.bg="#202020",this.char="@",this.facing=o.Dir.N,this.fg="white",this.level=1,this.class=e,this.apply(e),e.init(this),this.natural||(this.natural=(0,s.instantiateItem)(t,r.humanFist))}levelUp(){this.level++,this.hpMax+=this.class.hpGain,this.kiMax+=this.class.kiGain,this.str+=this.class.strGain}}e.default=a},2045:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(7594),r=i(9699);e.default=class{constructor(t,e=20){this.g=t,this.width=e,this.x=t.display.width-e}draw(){const t=this.g.player,e=Math.floor;this.y=0,this.str(t.name,"silver"),this.str(`${t.class.name}, Level ${t.level}`,"silver"),this.y++,this.stat("HP",`${e(t.hp)} / ${e(t.hpMax)}`),this.stat("Ki",`${e(t.ki)} / ${e(t.kiMax)}`),this.stat("Balance",`${e(t.balance)}%`),this.y++;const i=this.strBonus(!1),s=this.strBonus(!0);this.stat("Strength",`${e(t.str)} ${(0,n.bonusText)(i)}${null!==s?"/"+(0,n.bonusText)(s):""}`),this.stat("Armour",`${e(t.armour)}`),this.y++,t.slotUsed(r.ItemSlot.Primary)?this.drawItem(r.ItemSlot.Primary):t.slotUsed(r.ItemSlot.BothHands)?this.drawItem(r.ItemSlot.BothHands):this.y++,this.drawItem(r.ItemSlot.Secondary),this.drawItem(r.ItemSlot.Body),this.drawItem(r.ItemSlot.Head)}str(t,e,i){this.g.display.str(this.x,this.y++,t,e,i)}stat(t,e){this.g.display.str(this.x,this.y,t+":","silver"),this.g.display.str(this.x+t.length+2,this.y++,e,"white")}drawItem(t){if(!this.g.player.slotUsed(t))return void this.y++;const e=this.g.player.equipment[t];this.str("  "+e.name(),"silver"),this.g.display.at(this.x,this.y-1).set(e.token)}strBonus(t){const e=this.g.player;return t?e.slotUsed(r.ItemSlot.Secondary)?e.equipment[r.ItemSlot.Secondary].template.strength:null:e.slotUsed(r.ItemSlot.Primary)?e.equipment[r.ItemSlot.Primary].template.strength:e.slotUsed(r.ItemSlot.BothHands)?e.equipment[r.ItemSlot.BothHands].template.strength:0}}},5619:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e=5,i=5){this.g=t,this.x=e,this.y=i}show(t){this.text=t,this.g.redraw()}clear(){this.text=void 0,this.g.redraw()}draw(){this.text&&this.g.display.str(this.x,this.y,this.text,"yellow")}}},394:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.tychei=void 0;const r=n(i(6377));function s(t){return(t>>>0).toString(36)}function o(t){return~~parseInt(t,36)}e.tychei=class extends class{constructor(t,e){this.gen=t,this.setSeed(e)}next(){return this.impl()}setSeed(t){const e=t?this.parseSeed(t):this.randomState();this.impl=this.gen(void 0,{state:e})}}{constructor(t){super(r.default.tychei,t),this.name="tychei"}getSeed(){const t=this.impl.state();return[t.a,t.b,t.c,t.d].map(s).join(".")}parseSeed(t){const e=t.split(".");return{a:o(e[0]),b:o(e[1]),c:o(e[2]),d:o(e[3])}}randomState(){return this.gen(Math.random().toString(),{state:!0}).state()}}},1345:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.level=0,this.on=!0}enter(t,...e){this.message(t,...e),this.level++}message(t,...e){this.on&&console.log(this.space()+t,...e)}todo(t,...e){return this.message("TODO:"+t,...e)}leave(t){this.level--}space(){let t="";for(let e=0;e<this.level;e++)t+="> ";return t}}},395:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initClasses=e.Taoist=e.Monk=e.Ninja=e.Samurai=void 0;const n=i(2677),r=i(9587),s=i(9349),o=i(7989),a=i(5854),c=i(2834),l=i(5526);e.Samurai={name:"Samurai",hp:12,hpGain:4,ki:8,kiGain:3,str:10,strGain:1,skills:[l.Sweep],init:t=>{t.equip((0,s.constructItem)(t.g,r.wakizashi)),t.equip((0,s.constructItem)(t.g,n.doMaru)),t.get((0,s.constructItem)(t.g,r.yumi)),t.get((0,s.constructItem)(t.g,r.ya)),t.skills.push(l.Sweep.name)}},e.Ninja={name:"Ninja",hp:6,hpGain:2,ki:10,kiGain:4,str:4,strGain:0,skills:[o.Clone,c.Substitute],init:t=>{t.equip((0,s.constructItem)(t.g,r.tanto)),t.equip((0,s.constructItem)(t.g,r.shuriken)),t.skills.push(o.Clone.name),t.skills.push(c.Substitute.name)}},e.Monk={name:"Monk",hp:10,hpGain:3,ki:12,kiGain:4,str:8,strGain:.5,skills:[a.Kick],init:t=>{t.equip((0,s.constructItem)(t.g,n.hachimaki)),t.skills.push(a.Kick.name)}},e.Taoist={name:"Taoist",hp:4,hpGain:1,ki:14,kiGain:6,str:2,strGain:0,skills:[],init:t=>{t.g.t.todo("Taoist.init")}},e.initClasses=function(t){t.hooks.on("sys.advance",(()=>(0,c.expireSubstitute)(t)))}},2929:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.colourDeath=e.colourError=e.colourEnemyHit=e.colourPlayerHit=e.colourItems=e.colourInfo=void 0,e.colourInfo="white",e.colourItems="gray",e.colourPlayerHit="maroon",e.colourEnemyHit="orange",e.colourError="yellow",e.colourDeath="red"},9028:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.combatAlert=e.attack=e.damage=e.kill=void 0;const n=i(2929),r=i(5601),s=i(2834),o=i(7594),a=i(9699);function c(t,e){const i=t.g;e.dead=!0,e.target=void 0,e.targetPos=void 0,e.isPlayer?(i.log.coloured(n.colourDeath,"You died!"),i.hooks.fire("player.died",{attacker:t,victim:e})):(e.cloneOf?i.log.coloured(n.colourDeath,"%an vanishes with a puff of smoke!",e):e.aiState===a.AIState.Angry?(i.log.coloured(n.colourDeath,"%an screams as they die!",e),i.noise.add(e.pos,8,e,2)):i.log.coloured(n.colourDeath,"%an falls to the ground, dead!",e),i.hooks.fire("enemy.died",{attacker:t,victim:e})),i.remove(e)}function l(t,e,i){return e.hp-=i,e.isPlayer?t.g.hooks.fire("player.hit",{attacker:t,victim:e}):t.g.hooks.fire("enemy.hit",{attacker:t,victim:e}),!(e.hp<1&&(c(t,e),1))}function u(t,e,i){if(e.dead)return 0;if(e.substituteActive)return(0,s.applyNinjaSubstitute)(e,t),-100;let n=t.str/r.STRENGTH_RATIO+i.template.strength;return n=function(t,e,i){const n=(0,o.getCardinalDirectionBetween)(e.pos,t.pos),r=(0,o.getCardinalAngleBetween)(n,e.facing);let s=e.armour;return 1===r?s*=.75:0===r&&(s*=.25),s>i?0:Math.floor(i-s)}(t,e,n),t.g.log.info("%ao %cn hits %bn for %d#.",t,e,i,n),n>0&&l(t,e,n),n}function h(t,e){e.isEnemy&&(e.aiHurtBy=t)}e.kill=c,e.damage=l,e.attack=function(t,e){let i=0,n=0,r=0,s=!1;const o=t.getPrimaryWeapon();if(o){const a=u(t,e,o);-100===a?s=!0:i+=a,n+=o.template.weight||0,r+=o.template.moveTimer}if(!s){const s=t.getSecondaryWeapon();s&&!s.template.ammo&&e.alive&&(i+=u(t,e,s),n+=s.template.weight||0,r+=s.template.moveTimer)}return t.balance-=n,h(t,e),t.spend(r),t.g.redraw(),!0},e.combatAlert=h},5601:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.dirAngles=e.dirOffsets=e.STRENGTH_RATIO=e.TIMER_FREQUENCY=e.LIGHTS_FRAGMENTS=e.LIGHTS_STEP=e.ARTIFACT_CHANCE=e.MAGIC_CHANCE=e.ARCHITECT_MIN_ENEMIES=e.ARCHITECT_MIN_ROOMS=e.ARCHITECT_ATTEMPTS=void 0;const n=i(9699);e.ARCHITECT_ATTEMPTS=1e3,e.ARCHITECT_MIN_ROOMS=6,e.ARCHITECT_MIN_ENEMIES=10,e.MAGIC_CHANCE=5,e.ARTIFACT_CHANCE=1,e.LIGHTS_STEP=1,e.LIGHTS_FRAGMENTS=3,e.TIMER_FREQUENCY=50,e.STRENGTH_RATIO=3,e.dirOffsets={[n.Dir.N]:{x:0,y:-1},[n.Dir.NE]:{x:1,y:-1},[n.Dir.E]:{x:1,y:0},[n.Dir.SE]:{x:1,y:1},[n.Dir.S]:{x:0,y:1},[n.Dir.SW]:{x:-1,y:1},[n.Dir.W]:{x:-1,y:0},[n.Dir.NW]:{x:-1,y:-1}},e.dirAngles={[n.Dir.N]:270,[n.Dir.NE]:315,[n.Dir.E]:0,[n.Dir.SE]:45,[n.Dir.S]:90,[n.Dir.SW]:135,[n.Dir.W]:180,[n.Dir.NW]:225}},6724:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.EnemyNinja=void 0;const r=i(395),s=n(i(9986)),o=i(9587),a=i(9349),c=i(1397),l=i(7594);class u extends s.default{constructor(t){super(t),this.char="N",this.name=(0,c.randomName)(t),this.apply(r.Ninja),this.aiTraits.investigatesNoises=!0,0===(0,l.rnd)(t.rng,4)?(this.equip((0,a.constructItem)(t,o.sai)),this.equip((0,a.constructItem)(t,o.sai))):(this.equip((0,a.constructItem)(t,o.tanto)),this.equip((0,a.constructItem)(t,o.shuriken)))}}e.EnemyNinja=u},8925:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.EnemySamurai=void 0;const r=i(395),s=n(i(9986)),o=i(2677),a=i(9587),c=i(9349),l=i(1397),u=i(7594);class h extends s.default{constructor(t){super(t),this.char="S",this.name=(0,l.randomName)(t),this.apply(r.Samurai),this.aiTraits.investigatesNoises=!0,this.aiTraits.yellsOnSight=5,0===(0,u.rnd)(t.rng,4)?this.equip((0,c.constructItem)(t,a.katana)):0===(0,u.rnd)(t.rng,3)?(this.equip((0,c.constructItem)(t,a.yumi)),this.equip((0,c.constructItem)(t,a.ya))):this.equip((0,c.constructItem)(t,a.wakizashi)),0===(0,u.rnd)(t.rng,3)&&this.equip((0,c.constructItem)(t,o.doMaru)),0===(0,u.rnd)(t.rng,3)&&this.equip((0,c.constructItem)(t,o.sujiBachi))}}e.EnemySamurai=h},3607:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(7654);const r=n(i(9221));window.addEventListener("load",(()=>{const t=new r.default(document.getElementById("game-container"),'300 15px "Roboto Mono", monospace');window.G=t,t.debugNewFloor()}))},2677:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sujiBachi=e.hachimaki=e.doMaru=void 0;const n=i(9699);function r(t){return{name:t.name,article:t.article||"a",type:n.ItemType.Armour,slot:t.slot,mods:t.mods||{},weight:t.weight||0,traits:t.traits||{},rarity:t.rarity||1,stacked:!1}}e.doMaru=r({name:"dō-maru",slot:n.ItemSlot.Body,weight:5,mods:{armour:3}}),e.hachimaki=r({name:"hachimaki",slot:n.ItemSlot.Head}),e.sujiBachi=r({name:"suji bachi",slot:n.ItemSlot.Head,weight:2,mods:{armour:1,sightFov:-20}})},3423:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.kusanagi=void 0;const n=i(9699);e.kusanagi={name:"Kusanagi-no-Tsurugi",article:"the",type:n.ItemType.Weapon,hands:2,offhand:!1,strength:8,weight:4,traits:{handle:!0,blade:!0,sword:!0,legendary:!0},moveTimer:1,missile:!1,thrown:!1,ammo:!1,stacked:!1,mods:{},listeners:{"player.attack":t=>{}},rarity:1}},9587:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.humanFist=e.yumi=e.ya=e.wakizashi=e.tekko=e.tanto=e.shuriken=e.sai=e.katana=void 0;const n=i(7594),r=i(9699);function s(t){return{name:t.name,article:t.article||"a",type:r.ItemType.Weapon,mods:t.mods||{},weight:t.weight||0,traits:t.traits||{},rarity:t.rarity||1,stacked:t.stacked||!1,getStackAmount:t.getStackAmount,hands:t.hands||(t.ammo?0:1),offhand:t.offhand||!1,strength:t.strength,moveTimer:t.moveTimer||1,thrown:t.thrown||!1,ammo:t.ammo||!1,firedBy:t.firedBy,missile:t.missile||!1}}e.katana=s({name:"katana",hands:2,strength:3,weight:5,moveTimer:1.1,traits:{handle:!0,blade:!0,sword:!0}}),e.sai=s({name:"sai",offhand:!0,strength:1,weight:1,moveTimer:.7,rarity:10,traits:{handle:!0,blade:!0,sword:!0}}),e.shuriken=s({name:"shuriken",strength:1,moveTimer:.5,offhand:!0,thrown:!0,stacked:!0,getStackAmount:t=>(0,n.rnd)(t.rng,5)+1,traits:{blade:!0,missile:!0}}),e.tanto=s({name:"tantō",strength:1,weight:1,moveTimer:.8,traits:{handle:!0,blade:!0,knife:!0}}),e.tekko=s({name:"tekkō",article:"a pair of",hands:2,strength:1,weight:1,moveTimer:.9,traits:{handle:!0,blade:!0,fist:!0}}),e.wakizashi=s({name:"wakizashi",strength:2,weight:3,traits:{blade:!0,handle:!0,sword:!0}}),e.ya=s({name:"ya",hands:0,offhand:!0,strength:3,weight:0,moveTimer:0,ammo:!0,firedBy:{bow:!0},stacked:!0,getStackAmount:t=>(0,n.rnd)(t.rng,4)+1,traits:{point:!0,missile:!0,arrow:!0}}),e.yumi=s({name:"yumi",hands:2,strength:0,weight:3,moveTimer:1.5,missile:!0,traits:{bow:!0,wood:!0}}),e.humanFist=s({name:"fist",article:"your",hands:2,strength:0})},9607:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getVisibleEnemies=e.canSee=e.getSightCone=void 0;const n=i(5601),r=i(7594),s=i(9699);function o(t){const e=new Set,i=(0,r.mid)(t.pos.x),o=(0,r.mid)(t.pos.y);let a=-t.sightFov/2;const c=n.dirAngles[t.facing];let l=c+a;l<0&&(l+=360);let u=l;const h=t.sightFov/n.LIGHTS_STEP+1;for(let l=0;l<h;l++){u=c+a,u<0&&(u+=360);const l=(0,r.deg2rad)(u),h=i+t.sightRange*Math.cos(l),d=o+t.sightRange*Math.sin(l),f=t.g.trace(i,o,h,d,t.sightRange*n.LIGHTS_FRAGMENTS,(e=>e===t.pos||t.g.f.map.get(e.x,e.y)===s.Tile.Space));a+=n.LIGHTS_STEP,f.visited.forEach((t=>e.add(t)))}return e}e.getSightCone=o,e.canSee=function(t,e){return o(t).has(e)},e.getVisibleEnemies=function(t){const e=o(t);return t.g.actors.filter((i=>i.side!==t.side&&e.has(i.pos)))}},1397:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.randomName=void 0;const n=i(7594),r=["Akio","Akira","Daichi","Daiki","Daisuke","Eita","Gō","Haruma","Haruto","Hayato","Hinata","Hiroki","Hiroshi","Hiroto","Isamu","Itsuki","Kaito","Kan","Katsumi","Kazuki","Kazuya","Keisuke","Kenta","Kenzō","Kiyoshi","Kotarō","Kōhei","Makoto","Manabu","Masahiro","Masao","Masaru","Minato","Minoru","Naoki","Nobu","Osamu","Ren","Riku","Ryō","Ryūnosuke","Saburo","Shigeru","Shin","Shin'ichi","Shiro","Shō","Shōta","Shun","Sora","Sōta","Sōma","Susumu","Tadashi","Taiga","Taiki","Takashi","Takeo","Takeru","Takeshi","Takumi","Takuya","Tetsuya","Tsubasa","Tsuyoshi","Yamato","Yoshio","Yōta","Yuuta","Yutaka","Yuuto","Yuudai","Yuuma"],s=["Ai","Aiko","Aimi","Airi","Akemi","Amaya","Ana","Aoi","Ayaka","Ayami","Ayano","Beniko","Chinatsu","Chiyo","Chiyoko","Emi","Fumiko","Hana","Haruka","Haruna","Himari","Hina","Hiroko","Hitomi","Hotaru","Kaori","Kasumi","Kazuko","Kazumi","Keiko","Kiriko","Koharu","Kumiko","Mai","Mami","Mana","Mayumi","Megumi","Mei","Midori","Mina","Misaki","Miu","Miyu","Moe","Momoko","Nanami","Naoko","Naomi","Natsuki","Noriko","Reika","Riko","Rin","Sachiko","Sadako","Saki","Sakura","Satsuki","Saya","Sayuri","Setsuko","Shigeko","Shizuka","Teiko","Tomoko","Tomomi","Umeko","Yoko","Yoshiko","Yōko","Yua","Yui","Yukiko","Yuuma","Yumi","Yumiko","Yuna","Yuriko","Yuuka","Yuuna","Yuzuki"],o=["Satō","Suzuki","Takahashi","Tanaka","Watanabe","Itō","Yamamoto","Nakamura","Kobayashi","Katō","Yoshida","Yamada","Sasaki","Yamaguchi","Saitō","Matsumoto","Inoue","Kimura","Hayashi","Shimizu","Yamazaki","Nakajima","Mori","Abe","Ikeda","Hashimoto","Ishikawa","Yamashita","Ogawa","Ishii","Hasegawa","Gotō","Okada","Kondō","Maeda"];function a(t){const e=(0,n.oneOf)(t.rng,[r,s]),i=(0,n.oneOf)(t.rng,e);return`${(0,n.oneOf)(t.rng,o)} ${i}`}const c=["Wáng","Lǐ","Zhāng","Liú","Chén","Yáng","Huáng","Zhào","Wú","Zhōu","Xú","Sūn","Mǎ","Zhū","Hú","Guō","Hé","Gāo","Lín","Luó"],l=["Lì","Wěi","Fāng","Xiùyīng","Nà","Mǐn","Jìng","Qiáng","Lěi","Jūn","Yáng","Yǒng","Yàn","Jié","Juān","Tāo","Míng","Chāo","Xiùlán","Xiá","Píng","Gāng"];function u(t){const e=(0,n.oneOf)(t.rng,l);return`${(0,n.oneOf)(t.rng,c)} ${e}`}const h=["Kim","Lee","Park","Jung","Choi","Cho","Kang","Yoon","Im","Jang","Shin","Yoo","Han","Oh","Seo","Jeon","Kwon","Hwang","Ahn","Song","Hong","Yang","Ko","Moon","Son","Bae","Baek","Heo","Noh","Nam","Shim","Ha","Joo","Koo","Sung","Cha","Woo","Jin","Min","Na","Ji","Eom","Byun","Chae","Won","Bang","Cheon"],d=["Kyung","Kwang","Kyu","Ki","Nam","Da","Dae","Do","Dong","Man","Myung","Mun","Mi","Min","Bo","Beom","Byung","Sang","Seo","Seok","Seon","Seol","Seong","Se","So","Soo","Soon","Shi","Shin","Seung","Yeon","Young","Ye","Yong","Woo","Won","Yoo","Yoon","In","Eun","Jae","Jung","Jong","Joo","Joon","Ji","Jin","Chang","Chae","Chul","Chun","Tae","Ha","Han","Hae","Ho","Hong","Hyo","Hyun","Hyung","Hye","Hee"],f=["Kyung","Geun","Gi","Nam","Mi","Min","Bin","Seok","Seon","Seong","Soo","Sook","Sik","Ah","Yeon","Young","Ok","Yong","Woo","Wook","Woong","Yoon","Won","Il","Eun","Ja","Jae","Jung","Joo","Joon","Ji","Jin","Chul","Tae","Han","Ha","Hyuk","Hyun","Hye","Ho","Hwa","Hwan","Hon","Hee"];function m(t){const e=(0,n.oneOf)(t.rng,h),i=(0,n.oneOf)(t.rng,d);for(;;){const r=(0,n.oneOf)(t.rng,f);if(i!==r)return`${e} ${i}-${r.toLowerCase()}`}}e.randomName=function(t){return(0,n.oneOf)(t.rng,[a,u,m])(t)}},4945:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.makePath=void 0;const n=i(7594),r=i(9699);function s(t,e){let i,n=1/0;for(const r of t){const t=e.get(r);t<n&&(i=r,n=t)}return i}function o(t,e){const i=[],n=e.x>0,r=e.y>0,s=e.x<t.map.width-1,o=e.y<t.map.height-1;return n&&(i.push(t.map.ref(e.x-1,e.y)),r&&i.push(t.map.ref(e.x-1,e.y-1)),o&&i.push(t.map.ref(e.x-1,e.y+1))),r&&i.push(t.map.ref(e.x,e.y-1)),s&&(i.push(t.map.ref(e.x+1,e.y)),r&&i.push(t.map.ref(e.x+1,e.y-1)),o&&i.push(t.map.ref(e.x+1,e.y+1))),o&&i.push(t.map.ref(e.x,e.y+1)),i}function a(t,e){const i=[e];let n=e;for(;t.has(n);)n=t.get(n),i.unshift(n);return i}e.makePath=function(t,e,i){const c=new Set,l=new Set([e]),u=new Map,h=new Map;h.set(e,0);const d=new Map;for(d.set(e,(0,n.distance)(e,i));l.size;){const e=s(l,d);if(e===i)return a(u,i);l.delete(e),c.add(e),o(t,e).forEach((s=>{if(c.has(s))return;if(t.map.get(s.x,s.y)===r.Tile.Wall)return;const o=h.get(e)+1;if(l.has(s)){if(o>=h.get(s))return}else l.add(s);u.set(s,e),h.set(s,o),d.set(s,o+(0,n.distance)(s,i))}))}}},6248:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.rooms=void 0;const n=i(1512),r=i(9885);e.rooms=r.keys().map((t=>function(t,e){const i=e.replace("\r","").split("\n"),r=new n.Grid(t,i[0].length,i.length,"");for(let t=0;t<r.height;t++)for(let e=0;e<r.width;e++)r.set(e,t,i[t][e]);return r}(t,r(t).default)))},7989:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.swapPositionWithClone=e.Clone=void 0;const n=i(9028),r=i(6724),s=i(7594);function o(){if(this.lifetime<=this.g.timer)return(0,n.kill)(this,this),!1}e.Clone={name:"Clone",balance:0,ki:5,moveTimer:.5,fn:t=>{const i=t.g,n=t.skillsMastered.includes(e.Clone.name);let a=i.f.map.addFacing(t.pos,t.facing);if((0,s.isBlocked)(i,a)&&(a=(0,s.findSpace)(i,t.pos,1),!a))return t.isPlayer&&i.log.error("There's no space for a clone!"),!1;t.ki-=e.Clone.ki,t.balance-=e.Clone.balance,t.isPlayer?i.log.info("You conjure a copy of yourself."):i.log.info("A flash of light catches you off guard... now you're seeing double!");const c=n?t.hpMax/2:1,l=n?1/0:10,u=new r.EnemyNinja(i);u.isEnemy=t.isEnemy,u.pos=a,u.name=t.name,u.hp=u.hpMax=c,u.ai=o.bind(u),u.cloneOf=t,u.side=t.side,u.lifetime=i.timer+l,u.char=t.char,u.fg=t.fg,u.bg=t.bg,u.facing=t.facing,i.add(u),t.spend(e.Clone.moveTimer)}},e.swapPositionWithClone=function(t,e){const i=t.g,n=t.pos,r=t.facing,s=e.pos,o=e.facing;t.pos=s,t.facing=o,e.pos=n,e.facing=r,i.actors.forEach((i=>{i.target===t?(i.target=e,console.log(i.name,"target reassigned to clone.")):i.target===e&&(i.target=t,console.log(i.name,"target reassigned to ninja."))})),t.isPlayer&&(i.log.info("You quickly swap places with your clone."),i.hooks.fire("player.move",{actor:t,from:s}))}},5854:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Kick=void 0;const n=i(1207),r=i(2929),s=i(9028),o=i(5601),a=i(9699);e.Kick={name:"Kick",balance:3,ki:3,moveTimer:1,fn:t=>{const i=t.g,c=o.dirOffsets[t.facing],l=i.f.map.addFacing(t.pos,t.facing),u=i.blockers(l);if(!u.length)return i.log.error("There's nobody in front of you."),!1;const h=u[0],d=h.pos;i.log.coloured(h.isPlayer?r.colourPlayerHit:r.colourEnemyHit,"%ao foot smashes into %bo chest!",t,h),t.ki-=e.Kick.ki,t.balance-=e.Kick.balance;const f=i.f.map.width,m=i.f.map.height;let p=t.str,g=t.skillsMastered.includes(e.Kick.name)?1/0:5;for(;g>0;){const e=h.pos.x,o=h.pos.y,l=e+c.x,u=o+c.y,d=i.f.map.ref(l,u),y=i.f.map.get(l,u),v=i.blockers(d);if(y===a.Tile.Wall||y===a.Tile.Door){const e=(0,n.describeTile)(y);let r=!1;l>0&&l<f-1&&u>0&&u<m-1&&(r=!0,i.noise.add(d,12,t,3),i.f.map.set(l,u,a.Tile.Space),i.f.map.square(d,1).forEach((t=>{i.f.map.get(t.x,t.y)===a.Tile.Empty&&i.f.map.set(t.x,t.y,a.Tile.Wall)})));const s=r?", destroying it!":"!";i.log.info(`%an plow%as into ${e}${s}`,h),p*=1.5,g=0}else if(v.length){const e=v[0];i.log.coloured(e.isPlayer||h.isPlayer?r.colourPlayerHit:r.colourEnemyHit,"%an plow%as into %bn!",h,e),i.noise.add(d,6,t,3),(0,s.damage)(t,e,p),p*=1.5,g=0}h.pos=d,g--}h.isPlayer&&i.hooks.fire("player.move",{actor:h,from:d}),(0,s.damage)(t,h,p)&&(i.log.info("%an stagger%as to a stop.",h),(0,s.combatAlert)(t,h)),t.spend(e.Kick.moveTimer)}}},2834:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.applyNinjaSubstitute=e.expireSubstitute=e.Substitute=void 0;const n=i(9607),r=i(7594),s=i(9699);e.Substitute={name:"Substitute",balance:10,ki:3,moveTimer:.1,fn:t=>{if(t.substituteActive)return t.isPlayer&&t.g.log.error("You already have a substitute ready."),!1;const i=t.skillsMastered.includes(e.Substitute.name)?7:2;return t.ki-=e.Substitute.ki,t.balance-=e.Substitute.balance,t.isPlayer&&t.g.log.info("You ready a substitute."),t.substituteActive=!0,t.substituteTimer=t.g.timer+i,t.spend(e.Substitute.moveTimer),!0}},e.expireSubstitute=function(t){t.actors.forEach((t=>{t.substituteActive&&t.substituteTimer<=t.g.timer&&(t.substituteActive=!1,t.isPlayer&&t.g.log.info("Your substitute is no longer ready."))}))},e.applyNinjaSubstitute=function(t,i){const o=t.g;t.substituteActive=!1,t.isPlayer?o.log.info("%an hits your substitute!",i):i.isPlayer?o.log.info("You strike cleanly, but you hit a decoy!"):o.log.info("%an hits a decoy of %bn!",i,t);const a=t.skillsMastered.includes(e.Substitute.name)?5:3,c=o.f.map.square(t.pos,a).filter((t=>!(0,r.isBlocked)(o,t)));if(c.length){const e=(0,n.getSightCone)(i),a=c.filter((t=>!e.has(t)));if(a.length){const e=t.pos;t.pos=(0,r.oneOf)(o.rng,a),i.target===t&&(i.aiState=s.AIState.Passive,i.target=void 0),t.isPlayer&&(o.log.info("You teleport to relative safety."),o.hooks.fire("player.move",{actor:t,from:e}))}}}},5526:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sweep=void 0;const n=i(9028),r=i(5601),s=i(9699),o={[s.Dir.N]:[s.Dir.NE,s.Dir.E,s.Dir.SE,s.Dir.S],[s.Dir.NE]:[s.Dir.E,s.Dir.SE,s.Dir.S,s.Dir.SW],[s.Dir.E]:[s.Dir.SE,s.Dir.S,s.Dir.SW,s.Dir.W],[s.Dir.SE]:[s.Dir.S,s.Dir.SW,s.Dir.W,s.Dir.NW],[s.Dir.S]:[s.Dir.SW,s.Dir.W,s.Dir.NW,s.Dir.N],[s.Dir.SW]:[s.Dir.W,s.Dir.NW,s.Dir.N,s.Dir.NE],[s.Dir.W]:[s.Dir.NW,s.Dir.N,s.Dir.NE,s.Dir.E],[s.Dir.NW]:[s.Dir.N,s.Dir.NE,s.Dir.E,s.Dir.SE]};function a(t,e,i){const r=t.g.f.map.ref(e+t.pos.x,i+t.pos.y);t.g.blockers(r).forEach((e=>(0,n.attack)(t,e)))}e.Sweep={name:"Skill",balance:0,ki:2,moveTimer:1.5,fn:t=>(t.g.input.getDirection("Turn to which direction?",(i=>{if(t.facing===i)return void t.g.log.error("You're already facing that way!");t.ki-=e.Sweep.ki;const n=t.facing;let s=n;const c=function(t,e){return o[t].includes(e)?1:-1}(t.facing,i);for(t.g.log.info("%an sweep%as %ar %b#!",t,"weapon");s!==i;){s+=c,s<0&&(s+=8),s>7&&(s-=8);const i=r.dirOffsets[s];a(t,i.x,i.y),t.balance-=e.Sweep.balance}t.facing=s,t.isPlayer&&(t.g.hooks.fire("player.turn",{actor:t,from:n}),t.g.redraw()),t.spend(e.Sweep.moveTimer)})),!0)}},7594:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isBlocked=e.findSpace=e.distance=e.getCardinalAngleBetween=e.getDirectionBetween=e.getCardinalDirectionBetween=e.bonusText=e.capFirst=e.mid=e.deg2rad=e.any=e.oneOf=e.rnd=e.int=void 0;const n=i(9699);function r(t){return Math.floor(t)}function s(t,e){return r(t.next()*e)}e.int=r,e.rnd=s,e.oneOf=function(t,e){return e.length?e[s(t,e.length)]:null},e.any=function(t,e){for(let i=0;i<t.length;i++)if(e(t[i]))return!0;return!1};const o=2*Math.PI;e.deg2rad=function(t){return o*t/360},e.mid=function(t){return Math.round(t)+.499},e.capFirst=function(t){return t.slice(0,1).toUpperCase()+t.slice(1)},e.bonusText=function(t){return t<0?`${t}`:`+${t}`},e.getCardinalDirectionBetween=function(t,e){const i=t.x-e.x,r=t.y-e.y,s=Math.abs(i),o=Math.abs(r);return i<0&&s>=o?n.Dir.W:i>0&&s>=o?n.Dir.E:r<0?n.Dir.N:n.Dir.S};const a=Math.PI/4;function c(t,e){const i=t.f.map.get(e.x,e.y);return t.blockers(e).length>0||i!==n.Tile.Space}e.getDirectionBetween=function(t,e){const i=e.y-t.y,r=e.x-t.x,s=Math.atan2(i,r)+a/2,o=Math.floor(s/a)+3;return[n.Dir.NW,n.Dir.N,n.Dir.NE,n.Dir.E,n.Dir.SE,n.Dir.S,n.Dir.SW,n.Dir.W][o]},e.getCardinalAngleBetween=function(t,e){return t===e?0:t===n.Dir.N&&e===n.Dir.S||t===n.Dir.E&&e===n.Dir.W||t===n.Dir.S&&e===n.Dir.N||t===n.Dir.W&&e===n.Dir.E?2:1},e.distance=function(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)},e.findSpace=function(t,e,i){for(let n=0;n<1e3;n++){const n=s(t.rng,2*i)-i,r=s(t.rng,2*i)-i,o=t.f.map.ref(e.x+n,e.y+r);if(!c(t,o))return o}},e.isBlocked=c},9699:(t,e)=>{"use strict";var i,n,r,s,o,a;Object.defineProperty(e,"__esModule",{value:!0}),e.AIState=e.Side=e.Dir=e.ItemSlot=e.ItemType=e.Tile=void 0,(a=e.Tile||(e.Tile={})).Door="+",a.Empty=" ",a.Space=".",a.Wall="#",a.NotDoor="d",a.Enemy="E",a.Treasure="$",a.Player="@",(o=e.ItemType||(e.ItemType={})).Armour="[",o.Weapon=")",o.Other="$",(s=e.ItemSlot||(e.ItemSlot={})).Body="body",s.Head="head",s.Primary="primary",s.Secondary="secondary",s.BothHands="both",(r=e.Dir||(e.Dir={}))[r.N=0]="N",r[r.NE=1]="NE",r[r.E=2]="E",r[r.SE=3]="SE",r[r.S=4]="S",r[r.SW=5]="SW",r[r.W=6]="W",r[r.NW=7]="NW",(n=e.Side||(e.Side={}))[n.Player=0]="Player",n[n.Enemy=1]="Enemy",(i=e.AIState||(e.AIState={}))[i.Passive=0]="Passive",i[i.Investigating=1]="Investigating",i[i.Angry=2]="Angry"},9885:(t,e,i)=>{var n={"./ambush-yard.txt":4319,"./bend.txt":8158,"./grand-hall.txt":1083,"./guarded-vault.txt":5490,"./junction.txt":5705,"./long-corridor.txt":8141,"./small-treasure.txt":7871,"./t-junction.txt":496,"./tiny-pillar-hall.txt":267,"./yard.txt":9809};function r(t){var e=s(t);return i(e)}function s(t){if(!i.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}r.keys=function(){return Object.keys(n)},r.resolve=s,t.exports=r,r.id=9885},5002:(t,e,i)=>{"use strict";t.exports=i.p+"912f37f02592a7832c71.ttf"},2721:(t,e,i)=>{"use strict";t.exports=i.p+"295d807c15ec4ae6084d.ttf"},4299:(t,e,i)=>{"use strict";t.exports=i.p+"a8a1f3b102509358ac36.ttf"},4528:(t,e,i)=>{"use strict";t.exports=i.p+"e7c1761957d219576d52.ttf"},5042:()=>{}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var s=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.m=t,i.amdD=function(){throw new Error("define cannot be used indirect")},i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,i(3607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,